
TestTriac.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004308  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080044a8  080044a8  000144a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004540  08004540  00020844  2**0
                  CONTENTS
  4 .ARM          00000008  08004540  08004540  00014540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004548  08004548  00020844  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004548  08004548  00014548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800454c  0800454c  0001454c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000844  20000000  08004550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000844  08004d94  00020844  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000096c  08004d94  0002096c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020844  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb54  00000000  00000000  00020874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d76  00000000  00000000  000303c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  00032140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da0  00000000  00000000  00032f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000223a4  00000000  00000000  00033d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000100e2  00000000  00000000  000560dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d79f4  00000000  00000000  000661be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013dbb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000409c  00000000  00000000  0013dc04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000844 	.word	0x20000844
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004490 	.word	0x08004490

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000848 	.word	0x20000848
 80001dc:	08004490 	.word	0x08004490

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <set_alpha>:
   GPIOE->PUPDR   = 0x00000000;     // Disable all pull-ups and pull-downs
}


void set_alpha( int alpha )
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
   TIM1->CCR1 = alpha;
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <set_alpha+0x24>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	6353      	str	r3, [r2, #52]	; 0x34
   TIM1->ARR = alpha + TRIAC_PULSE_WIDTH;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <set_alpha+0x24>)
 800059a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	40012c00 	.word	0x40012c00

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b089      	sub	sp, #36	; 0x24
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 fb85 	bl	8000cc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f829 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 f943 	bl	8000844 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005be:	f000 f911 	bl	80007e4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80005c2:	f000 f875 	bl	80006b0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */


  power = 20;                   // Set output power (1000=100%)
 80005c6:	2314      	movs	r3, #20
 80005c8:	61fb      	str	r3, [r7, #28]
  alpha = alpha_lut[ power ];    // Get alpha from LUT
 80005ca:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <main+0x54>)
 80005cc:	69fb      	ldr	r3, [r7, #28]
 80005ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005d2:	61bb      	str	r3, [r7, #24]
  set_alpha( alpha );            // Generate alpha on output
 80005d4:	69b8      	ldr	r0, [r7, #24]
 80005d6:	f7ff ffd5 	bl	8000584 <set_alpha>

char msg2[20] = "Hola Mundo\n\r";
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <main+0x58>)
 80005dc:	1d3c      	adds	r4, r7, #4
 80005de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005e0:	c407      	stmia	r4!, {r0, r1, r2}
 80005e2:	7023      	strb	r3, [r4, #0]
 80005e4:	f107 0311 	add.w	r3, r7, #17
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	f8c3 2003 	str.w	r2, [r3, #3]
HAL_UART_Transmit(&huart2, (uint8_t *)msg2, sizeof(msg2), 100);
 80005f0:	1d39      	adds	r1, r7, #4
 80005f2:	2364      	movs	r3, #100	; 0x64
 80005f4:	2214      	movs	r2, #20
 80005f6:	4804      	ldr	r0, [pc, #16]	; (8000608 <main+0x5c>)
 80005f8:	f002 fde0 	bl	80031bc <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <main+0x50>
 80005fe:	bf00      	nop
 8000600:	20000000 	.word	0x20000000
 8000604:	080044a8 	.word	0x080044a8
 8000608:	200008ac 	.word	0x200008ac

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	; 0x58
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	2244      	movs	r2, #68	; 0x44
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f003 fac2 	bl	8003ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	463b      	mov	r3, r7
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800062e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000632:	f000 fe8b 	bl	800134c <HAL_PWREx_ControlVoltageScaling>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800063c:	f000 f9be 	bl	80009bc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000640:	2302      	movs	r3, #2
 8000642:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000648:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064a:	2340      	movs	r3, #64	; 0x40
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000652:	2302      	movs	r3, #2
 8000654:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000656:	2301      	movs	r3, #1
 8000658:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800065a:	230a      	movs	r3, #10
 800065c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800065e:	2307      	movs	r3, #7
 8000660:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4618      	mov	r0, r3
 8000670:	f000 fec2 	bl	80013f8 <HAL_RCC_OscConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800067a:	f000 f99f 	bl	80009bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2303      	movs	r3, #3
 8000684:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000692:	463b      	mov	r3, r7
 8000694:	2104      	movs	r1, #4
 8000696:	4618      	mov	r0, r3
 8000698:	f001 fac2 	bl	8001c20 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006a2:	f000 f98b 	bl	80009bc <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3758      	adds	r7, #88	; 0x58
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b096      	sub	sp, #88	; 0x58
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]
 80006d2:	615a      	str	r2, [r3, #20]
 80006d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	222c      	movs	r2, #44	; 0x2c
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f003 fa61 	bl	8003ba4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006e2:	4b3e      	ldr	r3, [pc, #248]	; (80007dc <MX_TIM1_Init+0x12c>)
 80006e4:	4a3e      	ldr	r2, [pc, #248]	; (80007e0 <MX_TIM1_Init+0x130>)
 80006e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 80006e8:	4b3c      	ldr	r3, [pc, #240]	; (80007dc <MX_TIM1_Init+0x12c>)
 80006ea:	22a7      	movs	r2, #167	; 0xa7
 80006ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ee:	4b3b      	ldr	r3, [pc, #236]	; (80007dc <MX_TIM1_Init+0x12c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006f4:	4b39      	ldr	r3, [pc, #228]	; (80007dc <MX_TIM1_Init+0x12c>)
 80006f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006fc:	4b37      	ldr	r3, [pc, #220]	; (80007dc <MX_TIM1_Init+0x12c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000702:	4b36      	ldr	r3, [pc, #216]	; (80007dc <MX_TIM1_Init+0x12c>)
 8000704:	2200      	movs	r2, #0
 8000706:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000708:	4b34      	ldr	r3, [pc, #208]	; (80007dc <MX_TIM1_Init+0x12c>)
 800070a:	2280      	movs	r2, #128	; 0x80
 800070c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800070e:	4833      	ldr	r0, [pc, #204]	; (80007dc <MX_TIM1_Init+0x12c>)
 8000710:	f002 f808 	bl	8002724 <HAL_TIM_OC_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800071a:	f000 f94f 	bl	80009bc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 800071e:	2108      	movs	r1, #8
 8000720:	482e      	ldr	r0, [pc, #184]	; (80007dc <MX_TIM1_Init+0x12c>)
 8000722:	f002 f856 	bl	80027d2 <HAL_TIM_OnePulse_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 800072c:	f000 f946 	bl	80009bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000730:	2320      	movs	r3, #32
 8000732:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8000734:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000738:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800073a:	2300      	movs	r3, #0
 800073c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800073e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000742:	4619      	mov	r1, r3
 8000744:	4825      	ldr	r0, [pc, #148]	; (80007dc <MX_TIM1_Init+0x12c>)
 8000746:	f002 fc05 	bl	8002f54 <HAL_TIMEx_MasterConfigSynchronization>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000750:	f000 f934 	bl	80009bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000754:	2300      	movs	r3, #0
 8000756:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800075c:	2300      	movs	r3, #0
 800075e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000760:	2300      	movs	r3, #0
 8000762:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000764:	2300      	movs	r3, #0
 8000766:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000768:	2300      	movs	r3, #0
 800076a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800076c:	2300      	movs	r3, #0
 800076e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000770:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000774:	2200      	movs	r2, #0
 8000776:	4619      	mov	r1, r3
 8000778:	4818      	ldr	r0, [pc, #96]	; (80007dc <MX_TIM1_Init+0x12c>)
 800077a:	f002 f885 	bl	8002888 <HAL_TIM_OC_ConfigChannel>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8000784:	f000 f91a 	bl	80009bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000788:	2300      	movs	r3, #0
 800078a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800079c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	4619      	mov	r1, r3
 80007bc:	4807      	ldr	r0, [pc, #28]	; (80007dc <MX_TIM1_Init+0x12c>)
 80007be:	f002 fc37 	bl	8003030 <HAL_TIMEx_ConfigBreakDeadTime>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 80007c8:	f000 f8f8 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007cc:	4803      	ldr	r0, [pc, #12]	; (80007dc <MX_TIM1_Init+0x12c>)
 80007ce:	f000 f93f 	bl	8000a50 <HAL_TIM_MspPostInit>

}
 80007d2:	bf00      	nop
 80007d4:	3758      	adds	r7, #88	; 0x58
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000860 	.word	0x20000860
 80007e0:	40012c00 	.word	0x40012c00

080007e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_USART2_UART_Init+0x58>)
 80007ea:	4a15      	ldr	r2, [pc, #84]	; (8000840 <MX_USART2_UART_Init+0x5c>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ee:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_USART2_UART_Init+0x58>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_USART2_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_USART2_UART_Init+0x58>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_USART2_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_USART2_UART_Init+0x58>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_USART2_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_USART2_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <MX_USART2_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_USART2_UART_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_USART2_UART_Init+0x58>)
 8000828:	f002 fc7a 	bl	8003120 <HAL_UART_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000832:	f000 f8c3 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200008ac 	.word	0x200008ac
 8000840:	40004400 	.word	0x40004400

08000844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_GPIO_Init+0xf4>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	4a36      	ldr	r2, [pc, #216]	; (8000938 <MX_GPIO_Init+0xf4>)
 8000860:	f043 0304 	orr.w	r3, r3, #4
 8000864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000866:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_GPIO_Init+0xf4>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	f003 0304 	and.w	r3, r3, #4
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000872:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_GPIO_Init+0xf4>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	4a30      	ldr	r2, [pc, #192]	; (8000938 <MX_GPIO_Init+0xf4>)
 8000878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800087c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087e:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_GPIO_Init+0xf4>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_GPIO_Init+0xf4>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	4a2a      	ldr	r2, [pc, #168]	; (8000938 <MX_GPIO_Init+0xf4>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000896:	4b28      	ldr	r3, [pc, #160]	; (8000938 <MX_GPIO_Init+0xf4>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	4b25      	ldr	r3, [pc, #148]	; (8000938 <MX_GPIO_Init+0xf4>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	4a24      	ldr	r2, [pc, #144]	; (8000938 <MX_GPIO_Init+0xf4>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ae:	4b22      	ldr	r3, [pc, #136]	; (8000938 <MX_GPIO_Init+0xf4>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2120      	movs	r1, #32
 80008be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c2:	f000 fd05 	bl	80012d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008cc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	4817      	ldr	r0, [pc, #92]	; (800093c <MX_GPIO_Init+0xf8>)
 80008de:	f000 fb7d 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80008e2:	2320      	movs	r3, #32
 80008e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fc:	f000 fb6e 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : ZC_Pin */
  GPIO_InitStruct.Pin = ZC_Pin;
 8000900:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000906:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800090a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ZC_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091a:	f000 fb5f 	bl	8000fdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2100      	movs	r1, #0
 8000922:	2017      	movs	r0, #23
 8000924:	f000 fb23 	bl	8000f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000928:	2017      	movs	r0, #23
 800092a:	f000 fb3c 	bl	8000fa6 <HAL_NVIC_EnableIRQ>

}
 800092e:	bf00      	nop
 8000930:	3728      	adds	r7, #40	; 0x28
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000
 800093c:	48000800 	.word	0x48000800

08000940 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == ZC_Pin){
 800094a:	88fb      	ldrh	r3, [r7, #6]
 800094c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000950:	d126      	bne.n	80009a0 <HAL_GPIO_EXTI_Callback+0x60>
	   //This block will be triggered after pin activated.
		globalCounter++;
 8000952:	4b16      	ldr	r3, [pc, #88]	; (80009ac <HAL_GPIO_EXTI_Callback+0x6c>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	3301      	adds	r3, #1
 8000958:	4a14      	ldr	r2, [pc, #80]	; (80009ac <HAL_GPIO_EXTI_Callback+0x6c>)
 800095a:	6013      	str	r3, [r2, #0]
		sprintf(msg, "%d \r\n", globalCounter);
 800095c:	4b13      	ldr	r3, [pc, #76]	; (80009ac <HAL_GPIO_EXTI_Callback+0x6c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	4913      	ldr	r1, [pc, #76]	; (80009b0 <HAL_GPIO_EXTI_Callback+0x70>)
 8000964:	4813      	ldr	r0, [pc, #76]	; (80009b4 <HAL_GPIO_EXTI_Callback+0x74>)
 8000966:	f003 f925 	bl	8003bb4 <siprintf>
		int i = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
		  for(i = 0; i < sizeof(msg); i++){
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	e008      	b.n	8000986 <HAL_GPIO_EXTI_Callback+0x46>
			  if(msg[i] == '\0'){
 8000974:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <HAL_GPIO_EXTI_Callback+0x74>)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	4413      	add	r3, r2
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d006      	beq.n	800098e <HAL_GPIO_EXTI_Callback+0x4e>
		  for(i = 0; i < sizeof(msg); i++){
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	3301      	adds	r3, #1
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	2b1d      	cmp	r3, #29
 800098a:	d9f3      	bls.n	8000974 <HAL_GPIO_EXTI_Callback+0x34>
 800098c:	e000      	b.n	8000990 <HAL_GPIO_EXTI_Callback+0x50>
				  break;
 800098e:	bf00      	nop
			  }
		  }
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, i, 100);
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	b29a      	uxth	r2, r3
 8000994:	2364      	movs	r3, #100	; 0x64
 8000996:	4907      	ldr	r1, [pc, #28]	; (80009b4 <HAL_GPIO_EXTI_Callback+0x74>)
 8000998:	4807      	ldr	r0, [pc, #28]	; (80009b8 <HAL_GPIO_EXTI_Callback+0x78>)
 800099a:	f002 fc0f 	bl	80031bc <HAL_UART_Transmit>
	}
	else{
		//Do not do anything when else.
		__NOP();
	}
}
 800099e:	e000      	b.n	80009a2 <HAL_GPIO_EXTI_Callback+0x62>
		__NOP();
 80009a0:	bf00      	nop
}
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000930 	.word	0x20000930
 80009b0:	080044bc 	.word	0x080044bc
 80009b4:	20000934 	.word	0x20000934
 80009b8:	200008ac 	.word	0x200008ac

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <Error_Handler+0x8>
	...

080009c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <HAL_MspInit+0x44>)
 80009d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009d2:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <HAL_MspInit+0x44>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6613      	str	r3, [r2, #96]	; 0x60
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <HAL_MspInit+0x44>)
 80009dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <HAL_MspInit+0x44>)
 80009e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ea:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <HAL_MspInit+0x44>)
 80009ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f0:	6593      	str	r3, [r2, #88]	; 0x58
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_MspInit+0x44>)
 80009f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40021000 	.word	0x40021000

08000a10 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <HAL_TIM_OC_MspInit+0x38>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d10b      	bne.n	8000a3a <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a22:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <HAL_TIM_OC_MspInit+0x3c>)
 8000a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a26:	4a09      	ldr	r2, [pc, #36]	; (8000a4c <HAL_TIM_OC_MspInit+0x3c>)
 8000a28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a2e:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <HAL_TIM_OC_MspInit+0x3c>)
 8000a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a3a:	bf00      	nop
 8000a3c:	3714      	adds	r7, #20
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40012c00 	.word	0x40012c00
 8000a4c:	40021000 	.word	0x40021000

08000a50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b088      	sub	sp, #32
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <HAL_TIM_MspPostInit+0x68>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d11d      	bne.n	8000aae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_TIM_MspPostInit+0x6c>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	4a11      	ldr	r2, [pc, #68]	; (8000abc <HAL_TIM_MspPostInit+0x6c>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <HAL_TIM_MspPostInit+0x6c>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aaa:	f000 fa97 	bl	8000fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000aae:	bf00      	nop
 8000ab0:	3720      	adds	r7, #32
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40012c00 	.word	0x40012c00
 8000abc:	40021000 	.word	0x40021000

08000ac0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b0a4      	sub	sp, #144	; 0x90
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2268      	movs	r2, #104	; 0x68
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f003 f85f 	bl	8003ba4 <memset>
  if(huart->Instance==USART2)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a21      	ldr	r2, [pc, #132]	; (8000b70 <HAL_UART_MspInit+0xb0>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d13a      	bne.n	8000b66 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000af0:	2302      	movs	r3, #2
 8000af2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4618      	mov	r0, r3
 8000afe:	f001 fab3 	bl	8002068 <HAL_RCCEx_PeriphCLKConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b08:	f7ff ff58 	bl	80009bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b0c:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <HAL_UART_MspInit+0xb4>)
 8000b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b10:	4a18      	ldr	r2, [pc, #96]	; (8000b74 <HAL_UART_MspInit+0xb4>)
 8000b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b16:	6593      	str	r3, [r2, #88]	; 0x58
 8000b18:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <HAL_UART_MspInit+0xb4>)
 8000b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <HAL_UART_MspInit+0xb4>)
 8000b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b28:	4a12      	ldr	r2, [pc, #72]	; (8000b74 <HAL_UART_MspInit+0xb4>)
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b30:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <HAL_UART_MspInit+0xb4>)
 8000b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b3c:	230c      	movs	r3, #12
 8000b3e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b52:	2307      	movs	r3, #7
 8000b54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b62:	f000 fa3b 	bl	8000fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b66:	bf00      	nop
 8000b68:	3790      	adds	r7, #144	; 0x90
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40004400 	.word	0x40004400
 8000b74:	40021000 	.word	0x40021000

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <NMI_Handler+0x4>

08000b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <HardFault_Handler+0x4>

08000b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <MemManage_Handler+0x4>

08000b8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <BusFault_Handler+0x4>

08000b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <UsageFault_Handler+0x4>

08000b96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc4:	f000 f8d8 	bl	8000d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ZC_Pin);
 8000bd0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bd4:	f000 fb94 	bl	8001300 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be4:	4a14      	ldr	r2, [pc, #80]	; (8000c38 <_sbrk+0x5c>)
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <_sbrk+0x60>)
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <_sbrk+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d102      	bne.n	8000bfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <_sbrk+0x64>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <_sbrk+0x68>)
 8000bfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <_sbrk+0x64>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d207      	bcs.n	8000c1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c0c:	f002 ffa0 	bl	8003b50 <__errno>
 8000c10:	4603      	mov	r3, r0
 8000c12:	220c      	movs	r2, #12
 8000c14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1a:	e009      	b.n	8000c30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c22:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <_sbrk+0x64>)
 8000c2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20028000 	.word	0x20028000
 8000c3c:	00000400 	.word	0x00000400
 8000c40:	20000954 	.word	0x20000954
 8000c44:	20000970 	.word	0x20000970

08000c48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <SystemInit+0x20>)
 8000c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c52:	4a05      	ldr	r2, [pc, #20]	; (8000c68 <SystemInit+0x20>)
 8000c54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c70:	f7ff ffea 	bl	8000c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c74:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c76:	490d      	ldr	r1, [pc, #52]	; (8000cac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c78:	4a0d      	ldr	r2, [pc, #52]	; (8000cb0 <LoopForever+0xe>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c7c:	e002      	b.n	8000c84 <LoopCopyDataInit>

08000c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c82:	3304      	adds	r3, #4

08000c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c88:	d3f9      	bcc.n	8000c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c8c:	4c0a      	ldr	r4, [pc, #40]	; (8000cb8 <LoopForever+0x16>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c90:	e001      	b.n	8000c96 <LoopFillZerobss>

08000c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c94:	3204      	adds	r2, #4

08000c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c98:	d3fb      	bcc.n	8000c92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9a:	f002 ff5f 	bl	8003b5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c9e:	f7ff fc85 	bl	80005ac <main>

08000ca2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ca2:	e7fe      	b.n	8000ca2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ca4:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cac:	20000844 	.word	0x20000844
  ldr r2, =_sidata
 8000cb0:	08004550 	.word	0x08004550
  ldr r2, =_sbss
 8000cb4:	20000844 	.word	0x20000844
  ldr r4, =_ebss
 8000cb8:	2000096c 	.word	0x2000096c

08000cbc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <ADC1_IRQHandler>
	...

08000cc0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <HAL_Init+0x3c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <HAL_Init+0x3c>)
 8000cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd6:	2003      	movs	r0, #3
 8000cd8:	f000 f93e 	bl	8000f58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f000 f80f 	bl	8000d00 <HAL_InitTick>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d002      	beq.n	8000cee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	71fb      	strb	r3, [r7, #7]
 8000cec:	e001      	b.n	8000cf2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cee:	f7ff fe6b 	bl	80009c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40022000 	.word	0x40022000

08000d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d0c:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <HAL_InitTick+0x6c>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d023      	beq.n	8000d5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d14:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_InitTick+0x70>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <HAL_InitTick+0x6c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f949 	bl	8000fc2 <HAL_SYSTICK_Config>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d10f      	bne.n	8000d56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2b0f      	cmp	r3, #15
 8000d3a:	d809      	bhi.n	8000d50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	f04f 30ff 	mov.w	r0, #4294967295
 8000d44:	f000 f913 	bl	8000f6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d48:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <HAL_InitTick+0x74>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	e007      	b.n	8000d60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	73fb      	strb	r3, [r7, #15]
 8000d54:	e004      	b.n	8000d60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	73fb      	strb	r3, [r7, #15]
 8000d5a:	e001      	b.n	8000d60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200007dc 	.word	0x200007dc
 8000d70:	200007d4 	.word	0x200007d4
 8000d74:	200007d8 	.word	0x200007d8

08000d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x20>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x24>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <HAL_IncTick+0x24>)
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	200007dc 	.word	0x200007dc
 8000d9c:	20000958 	.word	0x20000958

08000da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <HAL_GetTick+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000958 	.word	0x20000958

08000db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dea:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	60d3      	str	r3, [r2, #12]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <__NVIC_GetPriorityGrouping+0x18>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	f003 0307 	and.w	r3, r3, #7
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	db0b      	blt.n	8000e46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	f003 021f 	and.w	r2, r3, #31
 8000e34:	4907      	ldr	r1, [pc, #28]	; (8000e54 <__NVIC_EnableIRQ+0x38>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	095b      	lsrs	r3, r3, #5
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000e100 	.word	0xe000e100

08000e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	6039      	str	r1, [r7, #0]
 8000e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	db0a      	blt.n	8000e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	490c      	ldr	r1, [pc, #48]	; (8000ea4 <__NVIC_SetPriority+0x4c>)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	0112      	lsls	r2, r2, #4
 8000e78:	b2d2      	uxtb	r2, r2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e80:	e00a      	b.n	8000e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4908      	ldr	r1, [pc, #32]	; (8000ea8 <__NVIC_SetPriority+0x50>)
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	f003 030f 	and.w	r3, r3, #15
 8000e8e:	3b04      	subs	r3, #4
 8000e90:	0112      	lsls	r2, r2, #4
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	440b      	add	r3, r1
 8000e96:	761a      	strb	r2, [r3, #24]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000e100 	.word	0xe000e100
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b089      	sub	sp, #36	; 0x24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f1c3 0307 	rsb	r3, r3, #7
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	bf28      	it	cs
 8000eca:	2304      	movcs	r3, #4
 8000ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	2b06      	cmp	r3, #6
 8000ed4:	d902      	bls.n	8000edc <NVIC_EncodePriority+0x30>
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3b03      	subs	r3, #3
 8000eda:	e000      	b.n	8000ede <NVIC_EncodePriority+0x32>
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43da      	mvns	r2, r3
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	401a      	ands	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	fa01 f303 	lsl.w	r3, r1, r3
 8000efe:	43d9      	mvns	r1, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	4313      	orrs	r3, r2
         );
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3724      	adds	r7, #36	; 0x24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
	...

08000f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f24:	d301      	bcc.n	8000f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00f      	b.n	8000f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <SysTick_Config+0x40>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f32:	210f      	movs	r1, #15
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	f7ff ff8e 	bl	8000e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <SysTick_Config+0x40>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f42:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <SysTick_Config+0x40>)
 8000f44:	2207      	movs	r2, #7
 8000f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	e000e010 	.word	0xe000e010

08000f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff ff29 	bl	8000db8 <__NVIC_SetPriorityGrouping>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b086      	sub	sp, #24
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	4603      	mov	r3, r0
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]
 8000f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f80:	f7ff ff3e 	bl	8000e00 <__NVIC_GetPriorityGrouping>
 8000f84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	6978      	ldr	r0, [r7, #20]
 8000f8c:	f7ff ff8e 	bl	8000eac <NVIC_EncodePriority>
 8000f90:	4602      	mov	r2, r0
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff5d 	bl	8000e58 <__NVIC_SetPriority>
}
 8000f9e:	bf00      	nop
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff31 	bl	8000e1c <__NVIC_EnableIRQ>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffa2 	bl	8000f14 <SysTick_Config>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b087      	sub	sp, #28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fea:	e154      	b.n	8001296 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 8146 	beq.w	8001290 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	2b01      	cmp	r3, #1
 800100e:	d005      	beq.n	800101c <HAL_GPIO_Init+0x40>
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d130      	bne.n	800107e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	68da      	ldr	r2, [r3, #12]
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001052:	2201      	movs	r2, #1
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	091b      	lsrs	r3, r3, #4
 8001068:	f003 0201 	and.w	r2, r3, #1
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	2b03      	cmp	r3, #3
 8001088:	d017      	beq.n	80010ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	2203      	movs	r2, #3
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d123      	bne.n	800110e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	08da      	lsrs	r2, r3, #3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3208      	adds	r2, #8
 80010ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	220f      	movs	r2, #15
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	691a      	ldr	r2, [r3, #16]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	08da      	lsrs	r2, r3, #3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3208      	adds	r2, #8
 8001108:	6939      	ldr	r1, [r7, #16]
 800110a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	2203      	movs	r2, #3
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 0203 	and.w	r2, r3, #3
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 80a0 	beq.w	8001290 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001150:	4b58      	ldr	r3, [pc, #352]	; (80012b4 <HAL_GPIO_Init+0x2d8>)
 8001152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001154:	4a57      	ldr	r2, [pc, #348]	; (80012b4 <HAL_GPIO_Init+0x2d8>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6613      	str	r3, [r2, #96]	; 0x60
 800115c:	4b55      	ldr	r3, [pc, #340]	; (80012b4 <HAL_GPIO_Init+0x2d8>)
 800115e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001168:	4a53      	ldr	r2, [pc, #332]	; (80012b8 <HAL_GPIO_Init+0x2dc>)
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3302      	adds	r3, #2
 8001170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	220f      	movs	r2, #15
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001192:	d019      	beq.n	80011c8 <HAL_GPIO_Init+0x1ec>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a49      	ldr	r2, [pc, #292]	; (80012bc <HAL_GPIO_Init+0x2e0>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d013      	beq.n	80011c4 <HAL_GPIO_Init+0x1e8>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a48      	ldr	r2, [pc, #288]	; (80012c0 <HAL_GPIO_Init+0x2e4>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d00d      	beq.n	80011c0 <HAL_GPIO_Init+0x1e4>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a47      	ldr	r2, [pc, #284]	; (80012c4 <HAL_GPIO_Init+0x2e8>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d007      	beq.n	80011bc <HAL_GPIO_Init+0x1e0>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a46      	ldr	r2, [pc, #280]	; (80012c8 <HAL_GPIO_Init+0x2ec>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d101      	bne.n	80011b8 <HAL_GPIO_Init+0x1dc>
 80011b4:	2304      	movs	r3, #4
 80011b6:	e008      	b.n	80011ca <HAL_GPIO_Init+0x1ee>
 80011b8:	2307      	movs	r3, #7
 80011ba:	e006      	b.n	80011ca <HAL_GPIO_Init+0x1ee>
 80011bc:	2303      	movs	r3, #3
 80011be:	e004      	b.n	80011ca <HAL_GPIO_Init+0x1ee>
 80011c0:	2302      	movs	r3, #2
 80011c2:	e002      	b.n	80011ca <HAL_GPIO_Init+0x1ee>
 80011c4:	2301      	movs	r3, #1
 80011c6:	e000      	b.n	80011ca <HAL_GPIO_Init+0x1ee>
 80011c8:	2300      	movs	r3, #0
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	f002 0203 	and.w	r2, r2, #3
 80011d0:	0092      	lsls	r2, r2, #2
 80011d2:	4093      	lsls	r3, r2
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011da:	4937      	ldr	r1, [pc, #220]	; (80012b8 <HAL_GPIO_Init+0x2dc>)
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	089b      	lsrs	r3, r3, #2
 80011e0:	3302      	adds	r3, #2
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011e8:	4b38      	ldr	r3, [pc, #224]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	43db      	mvns	r3, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4313      	orrs	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800120c:	4a2f      	ldr	r2, [pc, #188]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001212:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	43db      	mvns	r3, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4313      	orrs	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001236:	4a25      	ldr	r2, [pc, #148]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800123c:	4b23      	ldr	r3, [pc, #140]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	43db      	mvns	r3, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4013      	ands	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001260:	4a1a      	ldr	r2, [pc, #104]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	43db      	mvns	r3, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4013      	ands	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4313      	orrs	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800128a:	4a10      	ldr	r2, [pc, #64]	; (80012cc <HAL_GPIO_Init+0x2f0>)
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	3301      	adds	r3, #1
 8001294:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	fa22 f303 	lsr.w	r3, r2, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f47f aea3 	bne.w	8000fec <HAL_GPIO_Init+0x10>
  }
}
 80012a6:	bf00      	nop
 80012a8:	bf00      	nop
 80012aa:	371c      	adds	r7, #28
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40010000 	.word	0x40010000
 80012bc:	48000400 	.word	0x48000400
 80012c0:	48000800 	.word	0x48000800
 80012c4:	48000c00 	.word	0x48000c00
 80012c8:	48001000 	.word	0x48001000
 80012cc:	40010400 	.word	0x40010400

080012d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	807b      	strh	r3, [r7, #2]
 80012dc:	4613      	mov	r3, r2
 80012de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012e0:	787b      	ldrb	r3, [r7, #1]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012e6:	887a      	ldrh	r2, [r7, #2]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012ec:	e002      	b.n	80012f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ee:	887a      	ldrh	r2, [r7, #2]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800130c:	695a      	ldr	r2, [r3, #20]
 800130e:	88fb      	ldrh	r3, [r7, #6]
 8001310:	4013      	ands	r3, r2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d006      	beq.n	8001324 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001316:	4a05      	ldr	r2, [pc, #20]	; (800132c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001318:	88fb      	ldrh	r3, [r7, #6]
 800131a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fb0e 	bl	8000940 <HAL_GPIO_EXTI_Callback>
  }
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40010400 	.word	0x40010400

08001330 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001334:	4b04      	ldr	r3, [pc, #16]	; (8001348 <HAL_PWREx_GetVoltageRange+0x18>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40007000 	.word	0x40007000

0800134c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800135a:	d130      	bne.n	80013be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800135c:	4b23      	ldr	r3, [pc, #140]	; (80013ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001368:	d038      	beq.n	80013dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800136a:	4b20      	ldr	r3, [pc, #128]	; (80013ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001372:	4a1e      	ldr	r2, [pc, #120]	; (80013ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001374:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001378:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800137a:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2232      	movs	r2, #50	; 0x32
 8001380:	fb02 f303 	mul.w	r3, r2, r3
 8001384:	4a1b      	ldr	r2, [pc, #108]	; (80013f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001386:	fba2 2303 	umull	r2, r3, r2, r3
 800138a:	0c9b      	lsrs	r3, r3, #18
 800138c:	3301      	adds	r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001390:	e002      	b.n	8001398 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	3b01      	subs	r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013a4:	d102      	bne.n	80013ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1f2      	bne.n	8001392 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013b8:	d110      	bne.n	80013dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e00f      	b.n	80013de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ca:	d007      	beq.n	80013dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013cc:	4b07      	ldr	r3, [pc, #28]	; (80013ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013d4:	4a05      	ldr	r2, [pc, #20]	; (80013ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40007000 	.word	0x40007000
 80013f0:	200007d4 	.word	0x200007d4
 80013f4:	431bde83 	.word	0x431bde83

080013f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d102      	bne.n	800140c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	f000 bc02 	b.w	8001c10 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800140c:	4b96      	ldr	r3, [pc, #600]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f003 030c 	and.w	r3, r3, #12
 8001414:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001416:	4b94      	ldr	r3, [pc, #592]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	f003 0303 	and.w	r3, r3, #3
 800141e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0310 	and.w	r3, r3, #16
 8001428:	2b00      	cmp	r3, #0
 800142a:	f000 80e4 	beq.w	80015f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d007      	beq.n	8001444 <HAL_RCC_OscConfig+0x4c>
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	2b0c      	cmp	r3, #12
 8001438:	f040 808b 	bne.w	8001552 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	2b01      	cmp	r3, #1
 8001440:	f040 8087 	bne.w	8001552 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001444:	4b88      	ldr	r3, [pc, #544]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <HAL_RCC_OscConfig+0x64>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e3d9      	b.n	8001c10 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a1a      	ldr	r2, [r3, #32]
 8001460:	4b81      	ldr	r3, [pc, #516]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0308 	and.w	r3, r3, #8
 8001468:	2b00      	cmp	r3, #0
 800146a:	d004      	beq.n	8001476 <HAL_RCC_OscConfig+0x7e>
 800146c:	4b7e      	ldr	r3, [pc, #504]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001474:	e005      	b.n	8001482 <HAL_RCC_OscConfig+0x8a>
 8001476:	4b7c      	ldr	r3, [pc, #496]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 8001478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800147c:	091b      	lsrs	r3, r3, #4
 800147e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001482:	4293      	cmp	r3, r2
 8001484:	d223      	bcs.n	80014ce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	4618      	mov	r0, r3
 800148c:	f000 fd8c 	bl	8001fa8 <RCC_SetFlashLatencyFromMSIRange>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e3ba      	b.n	8001c10 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800149a:	4b73      	ldr	r3, [pc, #460]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a72      	ldr	r2, [pc, #456]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 80014a0:	f043 0308 	orr.w	r3, r3, #8
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	4b70      	ldr	r3, [pc, #448]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	496d      	ldr	r1, [pc, #436]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014b8:	4b6b      	ldr	r3, [pc, #428]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69db      	ldr	r3, [r3, #28]
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	4968      	ldr	r1, [pc, #416]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	604b      	str	r3, [r1, #4]
 80014cc:	e025      	b.n	800151a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ce:	4b66      	ldr	r3, [pc, #408]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a65      	ldr	r2, [pc, #404]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 80014d4:	f043 0308 	orr.w	r3, r3, #8
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	4b63      	ldr	r3, [pc, #396]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	4960      	ldr	r1, [pc, #384]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014ec:	4b5e      	ldr	r3, [pc, #376]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	495b      	ldr	r1, [pc, #364]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d109      	bne.n	800151a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	4618      	mov	r0, r3
 800150c:	f000 fd4c 	bl	8001fa8 <RCC_SetFlashLatencyFromMSIRange>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e37a      	b.n	8001c10 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800151a:	f000 fc81 	bl	8001e20 <HAL_RCC_GetSysClockFreq>
 800151e:	4602      	mov	r2, r0
 8001520:	4b51      	ldr	r3, [pc, #324]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	091b      	lsrs	r3, r3, #4
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	4950      	ldr	r1, [pc, #320]	; (800166c <HAL_RCC_OscConfig+0x274>)
 800152c:	5ccb      	ldrb	r3, [r1, r3]
 800152e:	f003 031f 	and.w	r3, r3, #31
 8001532:	fa22 f303 	lsr.w	r3, r2, r3
 8001536:	4a4e      	ldr	r2, [pc, #312]	; (8001670 <HAL_RCC_OscConfig+0x278>)
 8001538:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800153a:	4b4e      	ldr	r3, [pc, #312]	; (8001674 <HAL_RCC_OscConfig+0x27c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fbde 	bl	8000d00 <HAL_InitTick>
 8001544:	4603      	mov	r3, r0
 8001546:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001548:	7bfb      	ldrb	r3, [r7, #15]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d052      	beq.n	80015f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	e35e      	b.n	8001c10 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d032      	beq.n	80015c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800155a:	4b43      	ldr	r3, [pc, #268]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a42      	ldr	r2, [pc, #264]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001566:	f7ff fc1b 	bl	8000da0 <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800156e:	f7ff fc17 	bl	8000da0 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e347      	b.n	8001c10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001580:	4b39      	ldr	r3, [pc, #228]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0f0      	beq.n	800156e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800158c:	4b36      	ldr	r3, [pc, #216]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a35      	ldr	r2, [pc, #212]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 8001592:	f043 0308 	orr.w	r3, r3, #8
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	4b33      	ldr	r3, [pc, #204]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	4930      	ldr	r1, [pc, #192]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015aa:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	021b      	lsls	r3, r3, #8
 80015b8:	492b      	ldr	r1, [pc, #172]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	604b      	str	r3, [r1, #4]
 80015be:	e01a      	b.n	80015f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015c0:	4b29      	ldr	r3, [pc, #164]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a28      	ldr	r2, [pc, #160]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 80015c6:	f023 0301 	bic.w	r3, r3, #1
 80015ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015cc:	f7ff fbe8 	bl	8000da0 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015d4:	f7ff fbe4 	bl	8000da0 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e314      	b.n	8001c10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015e6:	4b20      	ldr	r3, [pc, #128]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f0      	bne.n	80015d4 <HAL_RCC_OscConfig+0x1dc>
 80015f2:	e000      	b.n	80015f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d073      	beq.n	80016ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	2b08      	cmp	r3, #8
 8001606:	d005      	beq.n	8001614 <HAL_RCC_OscConfig+0x21c>
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	2b0c      	cmp	r3, #12
 800160c:	d10e      	bne.n	800162c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	2b03      	cmp	r3, #3
 8001612:	d10b      	bne.n	800162c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001614:	4b14      	ldr	r3, [pc, #80]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d063      	beq.n	80016e8 <HAL_RCC_OscConfig+0x2f0>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d15f      	bne.n	80016e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e2f1      	b.n	8001c10 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001634:	d106      	bne.n	8001644 <HAL_RCC_OscConfig+0x24c>
 8001636:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a0b      	ldr	r2, [pc, #44]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 800163c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	e025      	b.n	8001690 <HAL_RCC_OscConfig+0x298>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800164c:	d114      	bne.n	8001678 <HAL_RCC_OscConfig+0x280>
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a05      	ldr	r2, [pc, #20]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 8001654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	4b03      	ldr	r3, [pc, #12]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a02      	ldr	r2, [pc, #8]	; (8001668 <HAL_RCC_OscConfig+0x270>)
 8001660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	e013      	b.n	8001690 <HAL_RCC_OscConfig+0x298>
 8001668:	40021000 	.word	0x40021000
 800166c:	080044c4 	.word	0x080044c4
 8001670:	200007d4 	.word	0x200007d4
 8001674:	200007d8 	.word	0x200007d8
 8001678:	4ba0      	ldr	r3, [pc, #640]	; (80018fc <HAL_RCC_OscConfig+0x504>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a9f      	ldr	r2, [pc, #636]	; (80018fc <HAL_RCC_OscConfig+0x504>)
 800167e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4b9d      	ldr	r3, [pc, #628]	; (80018fc <HAL_RCC_OscConfig+0x504>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a9c      	ldr	r2, [pc, #624]	; (80018fc <HAL_RCC_OscConfig+0x504>)
 800168a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800168e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d013      	beq.n	80016c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001698:	f7ff fb82 	bl	8000da0 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a0:	f7ff fb7e 	bl	8000da0 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b64      	cmp	r3, #100	; 0x64
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e2ae      	b.n	8001c10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016b2:	4b92      	ldr	r3, [pc, #584]	; (80018fc <HAL_RCC_OscConfig+0x504>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f0      	beq.n	80016a0 <HAL_RCC_OscConfig+0x2a8>
 80016be:	e014      	b.n	80016ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c0:	f7ff fb6e 	bl	8000da0 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c8:	f7ff fb6a 	bl	8000da0 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b64      	cmp	r3, #100	; 0x64
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e29a      	b.n	8001c10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016da:	4b88      	ldr	r3, [pc, #544]	; (80018fc <HAL_RCC_OscConfig+0x504>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f0      	bne.n	80016c8 <HAL_RCC_OscConfig+0x2d0>
 80016e6:	e000      	b.n	80016ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d060      	beq.n	80017b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	d005      	beq.n	8001708 <HAL_RCC_OscConfig+0x310>
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	2b0c      	cmp	r3, #12
 8001700:	d119      	bne.n	8001736 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	2b02      	cmp	r3, #2
 8001706:	d116      	bne.n	8001736 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001708:	4b7c      	ldr	r3, [pc, #496]	; (80018fc <HAL_RCC_OscConfig+0x504>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_RCC_OscConfig+0x328>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e277      	b.n	8001c10 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001720:	4b76      	ldr	r3, [pc, #472]	; (80018fc <HAL_RCC_OscConfig+0x504>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	061b      	lsls	r3, r3, #24
 800172e:	4973      	ldr	r1, [pc, #460]	; (80018fc <HAL_RCC_OscConfig+0x504>)
 8001730:	4313      	orrs	r3, r2
 8001732:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001734:	e040      	b.n	80017b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d023      	beq.n	8001786 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800173e:	4b6f      	ldr	r3, [pc, #444]	; (80018fc <HAL_RCC_OscConfig+0x504>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a6e      	ldr	r2, [pc, #440]	; (80018fc <HAL_RCC_OscConfig+0x504>)
 8001744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174a:	f7ff fb29 	bl	8000da0 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001752:	f7ff fb25 	bl	8000da0 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e255      	b.n	8001c10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001764:	4b65      	ldr	r3, [pc, #404]	; (80018fc <HAL_RCC_OscConfig+0x504>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0f0      	beq.n	8001752 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001770:	4b62      	ldr	r3, [pc, #392]	; (80018fc <HAL_RCC_OscConfig+0x504>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	061b      	lsls	r3, r3, #24
 800177e:	495f      	ldr	r1, [pc, #380]	; (80018fc <HAL_RCC_OscConfig+0x504>)
 8001780:	4313      	orrs	r3, r2
 8001782:	604b      	str	r3, [r1, #4]
 8001784:	e018      	b.n	80017b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001786:	4b5d      	ldr	r3, [pc, #372]	; (80018fc <HAL_RCC_OscConfig+0x504>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a5c      	ldr	r2, [pc, #368]	; (80018fc <HAL_RCC_OscConfig+0x504>)
 800178c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001792:	f7ff fb05 	bl	8000da0 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800179a:	f7ff fb01 	bl	8000da0 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e231      	b.n	8001c10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017ac:	4b53      	ldr	r3, [pc, #332]	; (80018fc <HAL_RCC_OscConfig+0x504>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1f0      	bne.n	800179a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d03c      	beq.n	800183e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d01c      	beq.n	8001806 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017cc:	4b4b      	ldr	r3, [pc, #300]	; (80018fc <HAL_RCC_OscConfig+0x504>)
 80017ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d2:	4a4a      	ldr	r2, [pc, #296]	; (80018fc <HAL_RCC_OscConfig+0x504>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017dc:	f7ff fae0 	bl	8000da0 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e4:	f7ff fadc 	bl	8000da0 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e20c      	b.n	8001c10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017f6:	4b41      	ldr	r3, [pc, #260]	; (80018fc <HAL_RCC_OscConfig+0x504>)
 80017f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0ef      	beq.n	80017e4 <HAL_RCC_OscConfig+0x3ec>
 8001804:	e01b      	b.n	800183e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001806:	4b3d      	ldr	r3, [pc, #244]	; (80018fc <HAL_RCC_OscConfig+0x504>)
 8001808:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800180c:	4a3b      	ldr	r2, [pc, #236]	; (80018fc <HAL_RCC_OscConfig+0x504>)
 800180e:	f023 0301 	bic.w	r3, r3, #1
 8001812:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001816:	f7ff fac3 	bl	8000da0 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800181e:	f7ff fabf 	bl	8000da0 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e1ef      	b.n	8001c10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001830:	4b32      	ldr	r3, [pc, #200]	; (80018fc <HAL_RCC_OscConfig+0x504>)
 8001832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1ef      	bne.n	800181e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 80a6 	beq.w	8001998 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800184c:	2300      	movs	r3, #0
 800184e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001850:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <HAL_RCC_OscConfig+0x504>)
 8001852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d10d      	bne.n	8001878 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800185c:	4b27      	ldr	r3, [pc, #156]	; (80018fc <HAL_RCC_OscConfig+0x504>)
 800185e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001860:	4a26      	ldr	r2, [pc, #152]	; (80018fc <HAL_RCC_OscConfig+0x504>)
 8001862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001866:	6593      	str	r3, [r2, #88]	; 0x58
 8001868:	4b24      	ldr	r3, [pc, #144]	; (80018fc <HAL_RCC_OscConfig+0x504>)
 800186a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001874:	2301      	movs	r3, #1
 8001876:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001878:	4b21      	ldr	r3, [pc, #132]	; (8001900 <HAL_RCC_OscConfig+0x508>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001880:	2b00      	cmp	r3, #0
 8001882:	d118      	bne.n	80018b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001884:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <HAL_RCC_OscConfig+0x508>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a1d      	ldr	r2, [pc, #116]	; (8001900 <HAL_RCC_OscConfig+0x508>)
 800188a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800188e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001890:	f7ff fa86 	bl	8000da0 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001898:	f7ff fa82 	bl	8000da0 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e1b2      	b.n	8001c10 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <HAL_RCC_OscConfig+0x508>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d108      	bne.n	80018d0 <HAL_RCC_OscConfig+0x4d8>
 80018be:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <HAL_RCC_OscConfig+0x504>)
 80018c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c4:	4a0d      	ldr	r2, [pc, #52]	; (80018fc <HAL_RCC_OscConfig+0x504>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018ce:	e029      	b.n	8001924 <HAL_RCC_OscConfig+0x52c>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	2b05      	cmp	r3, #5
 80018d6:	d115      	bne.n	8001904 <HAL_RCC_OscConfig+0x50c>
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <HAL_RCC_OscConfig+0x504>)
 80018da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018de:	4a07      	ldr	r2, [pc, #28]	; (80018fc <HAL_RCC_OscConfig+0x504>)
 80018e0:	f043 0304 	orr.w	r3, r3, #4
 80018e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018e8:	4b04      	ldr	r3, [pc, #16]	; (80018fc <HAL_RCC_OscConfig+0x504>)
 80018ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ee:	4a03      	ldr	r2, [pc, #12]	; (80018fc <HAL_RCC_OscConfig+0x504>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018f8:	e014      	b.n	8001924 <HAL_RCC_OscConfig+0x52c>
 80018fa:	bf00      	nop
 80018fc:	40021000 	.word	0x40021000
 8001900:	40007000 	.word	0x40007000
 8001904:	4b9a      	ldr	r3, [pc, #616]	; (8001b70 <HAL_RCC_OscConfig+0x778>)
 8001906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800190a:	4a99      	ldr	r2, [pc, #612]	; (8001b70 <HAL_RCC_OscConfig+0x778>)
 800190c:	f023 0301 	bic.w	r3, r3, #1
 8001910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001914:	4b96      	ldr	r3, [pc, #600]	; (8001b70 <HAL_RCC_OscConfig+0x778>)
 8001916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800191a:	4a95      	ldr	r2, [pc, #596]	; (8001b70 <HAL_RCC_OscConfig+0x778>)
 800191c:	f023 0304 	bic.w	r3, r3, #4
 8001920:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d016      	beq.n	800195a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192c:	f7ff fa38 	bl	8000da0 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001932:	e00a      	b.n	800194a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001934:	f7ff fa34 	bl	8000da0 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001942:	4293      	cmp	r3, r2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e162      	b.n	8001c10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800194a:	4b89      	ldr	r3, [pc, #548]	; (8001b70 <HAL_RCC_OscConfig+0x778>)
 800194c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0ed      	beq.n	8001934 <HAL_RCC_OscConfig+0x53c>
 8001958:	e015      	b.n	8001986 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195a:	f7ff fa21 	bl	8000da0 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001960:	e00a      	b.n	8001978 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001962:	f7ff fa1d 	bl	8000da0 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001970:	4293      	cmp	r3, r2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e14b      	b.n	8001c10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001978:	4b7d      	ldr	r3, [pc, #500]	; (8001b70 <HAL_RCC_OscConfig+0x778>)
 800197a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1ed      	bne.n	8001962 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001986:	7ffb      	ldrb	r3, [r7, #31]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d105      	bne.n	8001998 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800198c:	4b78      	ldr	r3, [pc, #480]	; (8001b70 <HAL_RCC_OscConfig+0x778>)
 800198e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001990:	4a77      	ldr	r2, [pc, #476]	; (8001b70 <HAL_RCC_OscConfig+0x778>)
 8001992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001996:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0320 	and.w	r3, r3, #32
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d03c      	beq.n	8001a1e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d01c      	beq.n	80019e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019ac:	4b70      	ldr	r3, [pc, #448]	; (8001b70 <HAL_RCC_OscConfig+0x778>)
 80019ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019b2:	4a6f      	ldr	r2, [pc, #444]	; (8001b70 <HAL_RCC_OscConfig+0x778>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019bc:	f7ff f9f0 	bl	8000da0 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019c4:	f7ff f9ec 	bl	8000da0 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e11c      	b.n	8001c10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019d6:	4b66      	ldr	r3, [pc, #408]	; (8001b70 <HAL_RCC_OscConfig+0x778>)
 80019d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0ef      	beq.n	80019c4 <HAL_RCC_OscConfig+0x5cc>
 80019e4:	e01b      	b.n	8001a1e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019e6:	4b62      	ldr	r3, [pc, #392]	; (8001b70 <HAL_RCC_OscConfig+0x778>)
 80019e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019ec:	4a60      	ldr	r2, [pc, #384]	; (8001b70 <HAL_RCC_OscConfig+0x778>)
 80019ee:	f023 0301 	bic.w	r3, r3, #1
 80019f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f6:	f7ff f9d3 	bl	8000da0 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019fe:	f7ff f9cf 	bl	8000da0 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e0ff      	b.n	8001c10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a10:	4b57      	ldr	r3, [pc, #348]	; (8001b70 <HAL_RCC_OscConfig+0x778>)
 8001a12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1ef      	bne.n	80019fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 80f3 	beq.w	8001c0e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	f040 80c9 	bne.w	8001bc4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a32:	4b4f      	ldr	r3, [pc, #316]	; (8001b70 <HAL_RCC_OscConfig+0x778>)
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f003 0203 	and.w	r2, r3, #3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d12c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a50:	3b01      	subs	r3, #1
 8001a52:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d123      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a62:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d11b      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a72:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d113      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a82:	085b      	lsrs	r3, r3, #1
 8001a84:	3b01      	subs	r3, #1
 8001a86:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d109      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	085b      	lsrs	r3, r3, #1
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d06b      	beq.n	8001b78 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	2b0c      	cmp	r3, #12
 8001aa4:	d062      	beq.n	8001b6c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001aa6:	4b32      	ldr	r3, [pc, #200]	; (8001b70 <HAL_RCC_OscConfig+0x778>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e0ac      	b.n	8001c10 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ab6:	4b2e      	ldr	r3, [pc, #184]	; (8001b70 <HAL_RCC_OscConfig+0x778>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a2d      	ldr	r2, [pc, #180]	; (8001b70 <HAL_RCC_OscConfig+0x778>)
 8001abc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ac0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ac2:	f7ff f96d 	bl	8000da0 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aca:	f7ff f969 	bl	8000da0 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e099      	b.n	8001c10 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001adc:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <HAL_RCC_OscConfig+0x778>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1f0      	bne.n	8001aca <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ae8:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <HAL_RCC_OscConfig+0x778>)
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	4b21      	ldr	r3, [pc, #132]	; (8001b74 <HAL_RCC_OscConfig+0x77c>)
 8001aee:	4013      	ands	r3, r2
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001af8:	3a01      	subs	r2, #1
 8001afa:	0112      	lsls	r2, r2, #4
 8001afc:	4311      	orrs	r1, r2
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b02:	0212      	lsls	r2, r2, #8
 8001b04:	4311      	orrs	r1, r2
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b0a:	0852      	lsrs	r2, r2, #1
 8001b0c:	3a01      	subs	r2, #1
 8001b0e:	0552      	lsls	r2, r2, #21
 8001b10:	4311      	orrs	r1, r2
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b16:	0852      	lsrs	r2, r2, #1
 8001b18:	3a01      	subs	r2, #1
 8001b1a:	0652      	lsls	r2, r2, #25
 8001b1c:	4311      	orrs	r1, r2
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b22:	06d2      	lsls	r2, r2, #27
 8001b24:	430a      	orrs	r2, r1
 8001b26:	4912      	ldr	r1, [pc, #72]	; (8001b70 <HAL_RCC_OscConfig+0x778>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b2c:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <HAL_RCC_OscConfig+0x778>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a0f      	ldr	r2, [pc, #60]	; (8001b70 <HAL_RCC_OscConfig+0x778>)
 8001b32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b38:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <HAL_RCC_OscConfig+0x778>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	4a0c      	ldr	r2, [pc, #48]	; (8001b70 <HAL_RCC_OscConfig+0x778>)
 8001b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b44:	f7ff f92c 	bl	8000da0 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b4c:	f7ff f928 	bl	8000da0 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e058      	b.n	8001c10 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b5e:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <HAL_RCC_OscConfig+0x778>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b6a:	e050      	b.n	8001c0e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e04f      	b.n	8001c10 <HAL_RCC_OscConfig+0x818>
 8001b70:	40021000 	.word	0x40021000
 8001b74:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b78:	4b27      	ldr	r3, [pc, #156]	; (8001c18 <HAL_RCC_OscConfig+0x820>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d144      	bne.n	8001c0e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b84:	4b24      	ldr	r3, [pc, #144]	; (8001c18 <HAL_RCC_OscConfig+0x820>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a23      	ldr	r2, [pc, #140]	; (8001c18 <HAL_RCC_OscConfig+0x820>)
 8001b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b90:	4b21      	ldr	r3, [pc, #132]	; (8001c18 <HAL_RCC_OscConfig+0x820>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	4a20      	ldr	r2, [pc, #128]	; (8001c18 <HAL_RCC_OscConfig+0x820>)
 8001b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b9c:	f7ff f900 	bl	8000da0 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba4:	f7ff f8fc 	bl	8000da0 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e02c      	b.n	8001c10 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb6:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <HAL_RCC_OscConfig+0x820>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x7ac>
 8001bc2:	e024      	b.n	8001c0e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	2b0c      	cmp	r3, #12
 8001bc8:	d01f      	beq.n	8001c0a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bca:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <HAL_RCC_OscConfig+0x820>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <HAL_RCC_OscConfig+0x820>)
 8001bd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd6:	f7ff f8e3 	bl	8000da0 <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bde:	f7ff f8df 	bl	8000da0 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e00f      	b.n	8001c10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bf0:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <HAL_RCC_OscConfig+0x820>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1f0      	bne.n	8001bde <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_RCC_OscConfig+0x820>)
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	4905      	ldr	r1, [pc, #20]	; (8001c18 <HAL_RCC_OscConfig+0x820>)
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_RCC_OscConfig+0x824>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	60cb      	str	r3, [r1, #12]
 8001c08:	e001      	b.n	8001c0e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3720      	adds	r7, #32
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	feeefffc 	.word	0xfeeefffc

08001c20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0e7      	b.n	8001e04 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c34:	4b75      	ldr	r3, [pc, #468]	; (8001e0c <HAL_RCC_ClockConfig+0x1ec>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d910      	bls.n	8001c64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c42:	4b72      	ldr	r3, [pc, #456]	; (8001e0c <HAL_RCC_ClockConfig+0x1ec>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f023 0207 	bic.w	r2, r3, #7
 8001c4a:	4970      	ldr	r1, [pc, #448]	; (8001e0c <HAL_RCC_ClockConfig+0x1ec>)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c52:	4b6e      	ldr	r3, [pc, #440]	; (8001e0c <HAL_RCC_ClockConfig+0x1ec>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d001      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e0cf      	b.n	8001e04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d010      	beq.n	8001c92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	4b66      	ldr	r3, [pc, #408]	; (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d908      	bls.n	8001c92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c80:	4b63      	ldr	r3, [pc, #396]	; (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	4960      	ldr	r1, [pc, #384]	; (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d04c      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	d107      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca6:	4b5a      	ldr	r3, [pc, #360]	; (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d121      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e0a6      	b.n	8001e04 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d107      	bne.n	8001cce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cbe:	4b54      	ldr	r3, [pc, #336]	; (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d115      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e09a      	b.n	8001e04 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d107      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cd6:	4b4e      	ldr	r3, [pc, #312]	; (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d109      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e08e      	b.n	8001e04 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ce6:	4b4a      	ldr	r3, [pc, #296]	; (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e086      	b.n	8001e04 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cf6:	4b46      	ldr	r3, [pc, #280]	; (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f023 0203 	bic.w	r2, r3, #3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	4943      	ldr	r1, [pc, #268]	; (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d08:	f7ff f84a 	bl	8000da0 <HAL_GetTick>
 8001d0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0e:	e00a      	b.n	8001d26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d10:	f7ff f846 	bl	8000da0 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e06e      	b.n	8001e04 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d26:	4b3a      	ldr	r3, [pc, #232]	; (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 020c 	and.w	r2, r3, #12
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d1eb      	bne.n	8001d10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d010      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	4b31      	ldr	r3, [pc, #196]	; (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d208      	bcs.n	8001d66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d54:	4b2e      	ldr	r3, [pc, #184]	; (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	492b      	ldr	r1, [pc, #172]	; (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d66:	4b29      	ldr	r3, [pc, #164]	; (8001e0c <HAL_RCC_ClockConfig+0x1ec>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d210      	bcs.n	8001d96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d74:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <HAL_RCC_ClockConfig+0x1ec>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f023 0207 	bic.w	r2, r3, #7
 8001d7c:	4923      	ldr	r1, [pc, #140]	; (8001e0c <HAL_RCC_ClockConfig+0x1ec>)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d84:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <HAL_RCC_ClockConfig+0x1ec>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d001      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e036      	b.n	8001e04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d008      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001da2:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	4918      	ldr	r1, [pc, #96]	; (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d009      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dc0:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	4910      	ldr	r1, [pc, #64]	; (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dd4:	f000 f824 	bl	8001e20 <HAL_RCC_GetSysClockFreq>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <HAL_RCC_ClockConfig+0x1f0>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	091b      	lsrs	r3, r3, #4
 8001de0:	f003 030f 	and.w	r3, r3, #15
 8001de4:	490b      	ldr	r1, [pc, #44]	; (8001e14 <HAL_RCC_ClockConfig+0x1f4>)
 8001de6:	5ccb      	ldrb	r3, [r1, r3]
 8001de8:	f003 031f 	and.w	r3, r3, #31
 8001dec:	fa22 f303 	lsr.w	r3, r2, r3
 8001df0:	4a09      	ldr	r2, [pc, #36]	; (8001e18 <HAL_RCC_ClockConfig+0x1f8>)
 8001df2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001df4:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_RCC_ClockConfig+0x1fc>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7fe ff81 	bl	8000d00 <HAL_InitTick>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e02:	7afb      	ldrb	r3, [r7, #11]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40022000 	.word	0x40022000
 8001e10:	40021000 	.word	0x40021000
 8001e14:	080044c4 	.word	0x080044c4
 8001e18:	200007d4 	.word	0x200007d4
 8001e1c:	200007d8 	.word	0x200007d8

08001e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b089      	sub	sp, #36	; 0x24
 8001e24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e2e:	4b3e      	ldr	r3, [pc, #248]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e38:	4b3b      	ldr	r3, [pc, #236]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	f003 0303 	and.w	r3, r3, #3
 8001e40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <HAL_RCC_GetSysClockFreq+0x34>
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	2b0c      	cmp	r3, #12
 8001e4c:	d121      	bne.n	8001e92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d11e      	bne.n	8001e92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e54:	4b34      	ldr	r3, [pc, #208]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d107      	bne.n	8001e70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e60:	4b31      	ldr	r3, [pc, #196]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e66:	0a1b      	lsrs	r3, r3, #8
 8001e68:	f003 030f 	and.w	r3, r3, #15
 8001e6c:	61fb      	str	r3, [r7, #28]
 8001e6e:	e005      	b.n	8001e7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e70:	4b2d      	ldr	r3, [pc, #180]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	091b      	lsrs	r3, r3, #4
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e7c:	4a2b      	ldr	r2, [pc, #172]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10d      	bne.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e90:	e00a      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d102      	bne.n	8001e9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e98:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e9a:	61bb      	str	r3, [r7, #24]
 8001e9c:	e004      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	d101      	bne.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ea4:	4b23      	ldr	r3, [pc, #140]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ea6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	2b0c      	cmp	r3, #12
 8001eac:	d134      	bne.n	8001f18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eae:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d003      	beq.n	8001ec6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d003      	beq.n	8001ecc <HAL_RCC_GetSysClockFreq+0xac>
 8001ec4:	e005      	b.n	8001ed2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ec6:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ec8:	617b      	str	r3, [r7, #20]
      break;
 8001eca:	e005      	b.n	8001ed8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ecc:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ece:	617b      	str	r3, [r7, #20]
      break;
 8001ed0:	e002      	b.n	8001ed8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	617b      	str	r3, [r7, #20]
      break;
 8001ed6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ed8:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	091b      	lsrs	r3, r3, #4
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	0a1b      	lsrs	r3, r3, #8
 8001eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	fb03 f202 	mul.w	r2, r3, r2
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	0e5b      	lsrs	r3, r3, #25
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	3301      	adds	r3, #1
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f18:	69bb      	ldr	r3, [r7, #24]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3724      	adds	r7, #36	; 0x24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	080044dc 	.word	0x080044dc
 8001f30:	00f42400 	.word	0x00f42400
 8001f34:	007a1200 	.word	0x007a1200

08001f38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f3c:	4b03      	ldr	r3, [pc, #12]	; (8001f4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	200007d4 	.word	0x200007d4

08001f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f54:	f7ff fff0 	bl	8001f38 <HAL_RCC_GetHCLKFreq>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	0a1b      	lsrs	r3, r3, #8
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	4904      	ldr	r1, [pc, #16]	; (8001f78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f66:	5ccb      	ldrb	r3, [r1, r3]
 8001f68:	f003 031f 	and.w	r3, r3, #31
 8001f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40021000 	.word	0x40021000
 8001f78:	080044d4 	.word	0x080044d4

08001f7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f80:	f7ff ffda 	bl	8001f38 <HAL_RCC_GetHCLKFreq>
 8001f84:	4602      	mov	r2, r0
 8001f86:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	0adb      	lsrs	r3, r3, #11
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	4904      	ldr	r1, [pc, #16]	; (8001fa4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f92:	5ccb      	ldrb	r3, [r1, r3]
 8001f94:	f003 031f 	and.w	r3, r3, #31
 8001f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	080044d4 	.word	0x080044d4

08001fa8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fb4:	4b2a      	ldr	r3, [pc, #168]	; (8002060 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001fc0:	f7ff f9b6 	bl	8001330 <HAL_PWREx_GetVoltageRange>
 8001fc4:	6178      	str	r0, [r7, #20]
 8001fc6:	e014      	b.n	8001ff2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fc8:	4b25      	ldr	r3, [pc, #148]	; (8002060 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fcc:	4a24      	ldr	r2, [pc, #144]	; (8002060 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	6593      	str	r3, [r2, #88]	; 0x58
 8001fd4:	4b22      	ldr	r3, [pc, #136]	; (8002060 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fe0:	f7ff f9a6 	bl	8001330 <HAL_PWREx_GetVoltageRange>
 8001fe4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fe6:	4b1e      	ldr	r3, [pc, #120]	; (8002060 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fea:	4a1d      	ldr	r2, [pc, #116]	; (8002060 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ff8:	d10b      	bne.n	8002012 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b80      	cmp	r3, #128	; 0x80
 8001ffe:	d919      	bls.n	8002034 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2ba0      	cmp	r3, #160	; 0xa0
 8002004:	d902      	bls.n	800200c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002006:	2302      	movs	r3, #2
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	e013      	b.n	8002034 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800200c:	2301      	movs	r3, #1
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	e010      	b.n	8002034 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b80      	cmp	r3, #128	; 0x80
 8002016:	d902      	bls.n	800201e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002018:	2303      	movs	r3, #3
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	e00a      	b.n	8002034 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b80      	cmp	r3, #128	; 0x80
 8002022:	d102      	bne.n	800202a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002024:	2302      	movs	r3, #2
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	e004      	b.n	8002034 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b70      	cmp	r3, #112	; 0x70
 800202e:	d101      	bne.n	8002034 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002030:	2301      	movs	r3, #1
 8002032:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f023 0207 	bic.w	r2, r3, #7
 800203c:	4909      	ldr	r1, [pc, #36]	; (8002064 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002044:	4b07      	ldr	r3, [pc, #28]	; (8002064 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	429a      	cmp	r2, r3
 8002050:	d001      	beq.n	8002056 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40021000 	.word	0x40021000
 8002064:	40022000 	.word	0x40022000

08002068 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002070:	2300      	movs	r3, #0
 8002072:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002074:	2300      	movs	r3, #0
 8002076:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002080:	2b00      	cmp	r3, #0
 8002082:	d031      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002088:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800208c:	d01a      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800208e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002092:	d814      	bhi.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002094:	2b00      	cmp	r3, #0
 8002096:	d009      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002098:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800209c:	d10f      	bne.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800209e:	4b5d      	ldr	r3, [pc, #372]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	4a5c      	ldr	r2, [pc, #368]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020aa:	e00c      	b.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3304      	adds	r3, #4
 80020b0:	2100      	movs	r1, #0
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 fa44 	bl	8002540 <RCCEx_PLLSAI1_Config>
 80020b8:	4603      	mov	r3, r0
 80020ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020bc:	e003      	b.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	74fb      	strb	r3, [r7, #19]
      break;
 80020c2:	e000      	b.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80020c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020c6:	7cfb      	ldrb	r3, [r7, #19]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10b      	bne.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020cc:	4b51      	ldr	r3, [pc, #324]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020da:	494e      	ldr	r1, [pc, #312]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020e2:	e001      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020e4:	7cfb      	ldrb	r3, [r7, #19]
 80020e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 809e 	beq.w	8002232 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f6:	2300      	movs	r3, #0
 80020f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020fa:	4b46      	ldr	r3, [pc, #280]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800210a:	2300      	movs	r3, #0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00d      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002110:	4b40      	ldr	r3, [pc, #256]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002114:	4a3f      	ldr	r2, [pc, #252]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800211a:	6593      	str	r3, [r2, #88]	; 0x58
 800211c:	4b3d      	ldr	r3, [pc, #244]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800211e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002128:	2301      	movs	r3, #1
 800212a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800212c:	4b3a      	ldr	r3, [pc, #232]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a39      	ldr	r2, [pc, #228]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002136:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002138:	f7fe fe32 	bl	8000da0 <HAL_GetTick>
 800213c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800213e:	e009      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002140:	f7fe fe2e 	bl	8000da0 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d902      	bls.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	74fb      	strb	r3, [r7, #19]
        break;
 8002152:	e005      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002154:	4b30      	ldr	r3, [pc, #192]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0ef      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002160:	7cfb      	ldrb	r3, [r7, #19]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d15a      	bne.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002166:	4b2b      	ldr	r3, [pc, #172]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002170:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d01e      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	429a      	cmp	r2, r3
 8002180:	d019      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002182:	4b24      	ldr	r3, [pc, #144]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800218c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800218e:	4b21      	ldr	r3, [pc, #132]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002194:	4a1f      	ldr	r2, [pc, #124]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800219e:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a4:	4a1b      	ldr	r2, [pc, #108]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021ae:	4a19      	ldr	r2, [pc, #100]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d016      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c0:	f7fe fdee 	bl	8000da0 <HAL_GetTick>
 80021c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021c6:	e00b      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c8:	f7fe fdea 	bl	8000da0 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d902      	bls.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	74fb      	strb	r3, [r7, #19]
            break;
 80021de:	e006      	b.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021e0:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0ec      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80021ee:	7cfb      	ldrb	r3, [r7, #19]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d10b      	bne.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021f4:	4b07      	ldr	r3, [pc, #28]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002202:	4904      	ldr	r1, [pc, #16]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002204:	4313      	orrs	r3, r2
 8002206:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800220a:	e009      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800220c:	7cfb      	ldrb	r3, [r7, #19]
 800220e:	74bb      	strb	r3, [r7, #18]
 8002210:	e006      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002212:	bf00      	nop
 8002214:	40021000 	.word	0x40021000
 8002218:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800221c:	7cfb      	ldrb	r3, [r7, #19]
 800221e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002220:	7c7b      	ldrb	r3, [r7, #17]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d105      	bne.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002226:	4b9e      	ldr	r3, [pc, #632]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222a:	4a9d      	ldr	r2, [pc, #628]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800222c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002230:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00a      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800223e:	4b98      	ldr	r3, [pc, #608]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002244:	f023 0203 	bic.w	r2, r3, #3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	4994      	ldr	r1, [pc, #592]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800224e:	4313      	orrs	r3, r2
 8002250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00a      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002260:	4b8f      	ldr	r3, [pc, #572]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002266:	f023 020c 	bic.w	r2, r3, #12
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	498c      	ldr	r1, [pc, #560]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00a      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002282:	4b87      	ldr	r3, [pc, #540]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002288:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002290:	4983      	ldr	r1, [pc, #524]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002292:	4313      	orrs	r3, r2
 8002294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0308 	and.w	r3, r3, #8
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00a      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022a4:	4b7e      	ldr	r3, [pc, #504]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b2:	497b      	ldr	r1, [pc, #492]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0320 	and.w	r3, r3, #32
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00a      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022c6:	4b76      	ldr	r3, [pc, #472]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d4:	4972      	ldr	r1, [pc, #456]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00a      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022e8:	4b6d      	ldr	r3, [pc, #436]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ee:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	496a      	ldr	r1, [pc, #424]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00a      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800230a:	4b65      	ldr	r3, [pc, #404]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800230c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002310:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002318:	4961      	ldr	r1, [pc, #388]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800231a:	4313      	orrs	r3, r2
 800231c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00a      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800232c:	4b5c      	ldr	r3, [pc, #368]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002332:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800233a:	4959      	ldr	r1, [pc, #356]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00a      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800234e:	4b54      	ldr	r3, [pc, #336]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002354:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235c:	4950      	ldr	r1, [pc, #320]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800235e:	4313      	orrs	r3, r2
 8002360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00a      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002370:	4b4b      	ldr	r3, [pc, #300]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002376:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237e:	4948      	ldr	r1, [pc, #288]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002380:	4313      	orrs	r3, r2
 8002382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00a      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002392:	4b43      	ldr	r3, [pc, #268]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002394:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002398:	f023 0203 	bic.w	r2, r3, #3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	493f      	ldr	r1, [pc, #252]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d028      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023b4:	4b3a      	ldr	r3, [pc, #232]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023c2:	4937      	ldr	r1, [pc, #220]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023d2:	d106      	bne.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023d4:	4b32      	ldr	r3, [pc, #200]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	4a31      	ldr	r2, [pc, #196]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023de:	60d3      	str	r3, [r2, #12]
 80023e0:	e011      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023ea:	d10c      	bne.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3304      	adds	r3, #4
 80023f0:	2101      	movs	r1, #1
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 f8a4 	bl	8002540 <RCCEx_PLLSAI1_Config>
 80023f8:	4603      	mov	r3, r0
 80023fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023fc:	7cfb      	ldrb	r3, [r7, #19]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8002402:	7cfb      	ldrb	r3, [r7, #19]
 8002404:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d028      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002412:	4b23      	ldr	r3, [pc, #140]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002418:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002420:	491f      	ldr	r1, [pc, #124]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002422:	4313      	orrs	r3, r2
 8002424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002430:	d106      	bne.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002432:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	4a1a      	ldr	r2, [pc, #104]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002438:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800243c:	60d3      	str	r3, [r2, #12]
 800243e:	e011      	b.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002444:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002448:	d10c      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3304      	adds	r3, #4
 800244e:	2101      	movs	r1, #1
 8002450:	4618      	mov	r0, r3
 8002452:	f000 f875 	bl	8002540 <RCCEx_PLLSAI1_Config>
 8002456:	4603      	mov	r3, r0
 8002458:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800245a:	7cfb      	ldrb	r3, [r7, #19]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8002460:	7cfb      	ldrb	r3, [r7, #19]
 8002462:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d02b      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002470:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002476:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247e:	4908      	ldr	r1, [pc, #32]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002480:	4313      	orrs	r3, r2
 8002482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800248e:	d109      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002490:	4b03      	ldr	r3, [pc, #12]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	4a02      	ldr	r2, [pc, #8]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002496:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800249a:	60d3      	str	r3, [r2, #12]
 800249c:	e014      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800249e:	bf00      	nop
 80024a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024ac:	d10c      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3304      	adds	r3, #4
 80024b2:	2101      	movs	r1, #1
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 f843 	bl	8002540 <RCCEx_PLLSAI1_Config>
 80024ba:	4603      	mov	r3, r0
 80024bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024be:	7cfb      	ldrb	r3, [r7, #19]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80024c4:	7cfb      	ldrb	r3, [r7, #19]
 80024c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d01c      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024d4:	4b19      	ldr	r3, [pc, #100]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e2:	4916      	ldr	r1, [pc, #88]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024f2:	d10c      	bne.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3304      	adds	r3, #4
 80024f8:	2102      	movs	r1, #2
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 f820 	bl	8002540 <RCCEx_PLLSAI1_Config>
 8002500:	4603      	mov	r3, r0
 8002502:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002504:	7cfb      	ldrb	r3, [r7, #19]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 800250a:	7cfb      	ldrb	r3, [r7, #19]
 800250c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00a      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800251a:	4b08      	ldr	r3, [pc, #32]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800251c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002520:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002528:	4904      	ldr	r1, [pc, #16]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002530:	7cbb      	ldrb	r3, [r7, #18]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40021000 	.word	0x40021000

08002540 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800254e:	4b74      	ldr	r3, [pc, #464]	; (8002720 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d018      	beq.n	800258c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800255a:	4b71      	ldr	r3, [pc, #452]	; (8002720 <RCCEx_PLLSAI1_Config+0x1e0>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f003 0203 	and.w	r2, r3, #3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	d10d      	bne.n	8002586 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
       ||
 800256e:	2b00      	cmp	r3, #0
 8002570:	d009      	beq.n	8002586 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002572:	4b6b      	ldr	r3, [pc, #428]	; (8002720 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	091b      	lsrs	r3, r3, #4
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
       ||
 8002582:	429a      	cmp	r2, r3
 8002584:	d047      	beq.n	8002616 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	73fb      	strb	r3, [r7, #15]
 800258a:	e044      	b.n	8002616 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b03      	cmp	r3, #3
 8002592:	d018      	beq.n	80025c6 <RCCEx_PLLSAI1_Config+0x86>
 8002594:	2b03      	cmp	r3, #3
 8002596:	d825      	bhi.n	80025e4 <RCCEx_PLLSAI1_Config+0xa4>
 8002598:	2b01      	cmp	r3, #1
 800259a:	d002      	beq.n	80025a2 <RCCEx_PLLSAI1_Config+0x62>
 800259c:	2b02      	cmp	r3, #2
 800259e:	d009      	beq.n	80025b4 <RCCEx_PLLSAI1_Config+0x74>
 80025a0:	e020      	b.n	80025e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025a2:	4b5f      	ldr	r3, [pc, #380]	; (8002720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d11d      	bne.n	80025ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025b2:	e01a      	b.n	80025ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025b4:	4b5a      	ldr	r3, [pc, #360]	; (8002720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d116      	bne.n	80025ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025c4:	e013      	b.n	80025ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025c6:	4b56      	ldr	r3, [pc, #344]	; (8002720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10f      	bne.n	80025f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025d2:	4b53      	ldr	r3, [pc, #332]	; (8002720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d109      	bne.n	80025f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025e2:	e006      	b.n	80025f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	73fb      	strb	r3, [r7, #15]
      break;
 80025e8:	e004      	b.n	80025f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025ea:	bf00      	nop
 80025ec:	e002      	b.n	80025f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025ee:	bf00      	nop
 80025f0:	e000      	b.n	80025f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10d      	bne.n	8002616 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025fa:	4b49      	ldr	r3, [pc, #292]	; (8002720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6819      	ldr	r1, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	3b01      	subs	r3, #1
 800260c:	011b      	lsls	r3, r3, #4
 800260e:	430b      	orrs	r3, r1
 8002610:	4943      	ldr	r1, [pc, #268]	; (8002720 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002612:	4313      	orrs	r3, r2
 8002614:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d17c      	bne.n	8002716 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800261c:	4b40      	ldr	r3, [pc, #256]	; (8002720 <RCCEx_PLLSAI1_Config+0x1e0>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a3f      	ldr	r2, [pc, #252]	; (8002720 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002622:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002626:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002628:	f7fe fbba 	bl	8000da0 <HAL_GetTick>
 800262c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800262e:	e009      	b.n	8002644 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002630:	f7fe fbb6 	bl	8000da0 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d902      	bls.n	8002644 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	73fb      	strb	r3, [r7, #15]
        break;
 8002642:	e005      	b.n	8002650 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002644:	4b36      	ldr	r3, [pc, #216]	; (8002720 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1ef      	bne.n	8002630 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d15f      	bne.n	8002716 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d110      	bne.n	800267e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800265c:	4b30      	ldr	r3, [pc, #192]	; (8002720 <RCCEx_PLLSAI1_Config+0x1e0>)
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002664:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6892      	ldr	r2, [r2, #8]
 800266c:	0211      	lsls	r1, r2, #8
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	68d2      	ldr	r2, [r2, #12]
 8002672:	06d2      	lsls	r2, r2, #27
 8002674:	430a      	orrs	r2, r1
 8002676:	492a      	ldr	r1, [pc, #168]	; (8002720 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002678:	4313      	orrs	r3, r2
 800267a:	610b      	str	r3, [r1, #16]
 800267c:	e027      	b.n	80026ce <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d112      	bne.n	80026aa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002684:	4b26      	ldr	r3, [pc, #152]	; (8002720 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800268c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6892      	ldr	r2, [r2, #8]
 8002694:	0211      	lsls	r1, r2, #8
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6912      	ldr	r2, [r2, #16]
 800269a:	0852      	lsrs	r2, r2, #1
 800269c:	3a01      	subs	r2, #1
 800269e:	0552      	lsls	r2, r2, #21
 80026a0:	430a      	orrs	r2, r1
 80026a2:	491f      	ldr	r1, [pc, #124]	; (8002720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	610b      	str	r3, [r1, #16]
 80026a8:	e011      	b.n	80026ce <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026aa:	4b1d      	ldr	r3, [pc, #116]	; (8002720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6892      	ldr	r2, [r2, #8]
 80026ba:	0211      	lsls	r1, r2, #8
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6952      	ldr	r2, [r2, #20]
 80026c0:	0852      	lsrs	r2, r2, #1
 80026c2:	3a01      	subs	r2, #1
 80026c4:	0652      	lsls	r2, r2, #25
 80026c6:	430a      	orrs	r2, r1
 80026c8:	4915      	ldr	r1, [pc, #84]	; (8002720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026ce:	4b14      	ldr	r3, [pc, #80]	; (8002720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a13      	ldr	r2, [pc, #76]	; (8002720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026d8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026da:	f7fe fb61 	bl	8000da0 <HAL_GetTick>
 80026de:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026e0:	e009      	b.n	80026f6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026e2:	f7fe fb5d 	bl	8000da0 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d902      	bls.n	80026f6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	73fb      	strb	r3, [r7, #15]
          break;
 80026f4:	e005      	b.n	8002702 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026f6:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0ef      	beq.n	80026e2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002702:	7bfb      	ldrb	r3, [r7, #15]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d106      	bne.n	8002716 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002708:	4b05      	ldr	r3, [pc, #20]	; (8002720 <RCCEx_PLLSAI1_Config+0x1e0>)
 800270a:	691a      	ldr	r2, [r3, #16]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	4903      	ldr	r1, [pc, #12]	; (8002720 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002712:	4313      	orrs	r3, r2
 8002714:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002716:	7bfb      	ldrb	r3, [r7, #15]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40021000 	.word	0x40021000

08002724 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e049      	b.n	80027ca <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d106      	bne.n	8002750 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7fe f960 	bl	8000a10 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3304      	adds	r3, #4
 8002760:	4619      	mov	r1, r3
 8002762:	4610      	mov	r0, r2
 8002764:	f000 f90a 	bl	800297c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e041      	b.n	800286a <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d106      	bne.n	8002800 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f839 	bl	8002872 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3304      	adds	r3, #4
 8002810:	4619      	mov	r1, r3
 8002812:	4610      	mov	r0, r2
 8002814:	f000 f8b2 	bl	800297c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0208 	bic.w	r2, r2, #8
 8002826:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6819      	ldr	r1, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d101      	bne.n	80028a6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80028a2:	2302      	movs	r3, #2
 80028a4:	e066      	b.n	8002974 <HAL_TIM_OC_ConfigChannel+0xec>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b14      	cmp	r3, #20
 80028b2:	d857      	bhi.n	8002964 <HAL_TIM_OC_ConfigChannel+0xdc>
 80028b4:	a201      	add	r2, pc, #4	; (adr r2, 80028bc <HAL_TIM_OC_ConfigChannel+0x34>)
 80028b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ba:	bf00      	nop
 80028bc:	08002911 	.word	0x08002911
 80028c0:	08002965 	.word	0x08002965
 80028c4:	08002965 	.word	0x08002965
 80028c8:	08002965 	.word	0x08002965
 80028cc:	0800291f 	.word	0x0800291f
 80028d0:	08002965 	.word	0x08002965
 80028d4:	08002965 	.word	0x08002965
 80028d8:	08002965 	.word	0x08002965
 80028dc:	0800292d 	.word	0x0800292d
 80028e0:	08002965 	.word	0x08002965
 80028e4:	08002965 	.word	0x08002965
 80028e8:	08002965 	.word	0x08002965
 80028ec:	0800293b 	.word	0x0800293b
 80028f0:	08002965 	.word	0x08002965
 80028f4:	08002965 	.word	0x08002965
 80028f8:	08002965 	.word	0x08002965
 80028fc:	08002949 	.word	0x08002949
 8002900:	08002965 	.word	0x08002965
 8002904:	08002965 	.word	0x08002965
 8002908:	08002965 	.word	0x08002965
 800290c:	08002957 	.word	0x08002957
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68b9      	ldr	r1, [r7, #8]
 8002916:	4618      	mov	r0, r3
 8002918:	f000 f89e 	bl	8002a58 <TIM_OC1_SetConfig>
      break;
 800291c:	e025      	b.n	800296a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68b9      	ldr	r1, [r7, #8]
 8002924:	4618      	mov	r0, r3
 8002926:	f000 f913 	bl	8002b50 <TIM_OC2_SetConfig>
      break;
 800292a:	e01e      	b.n	800296a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	4618      	mov	r0, r3
 8002934:	f000 f986 	bl	8002c44 <TIM_OC3_SetConfig>
      break;
 8002938:	e017      	b.n	800296a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68b9      	ldr	r1, [r7, #8]
 8002940:	4618      	mov	r0, r3
 8002942:	f000 f9f7 	bl	8002d34 <TIM_OC4_SetConfig>
      break;
 8002946:	e010      	b.n	800296a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	4618      	mov	r0, r3
 8002950:	f000 fa4e 	bl	8002df0 <TIM_OC5_SetConfig>
      break;
 8002954:	e009      	b.n	800296a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68b9      	ldr	r1, [r7, #8]
 800295c:	4618      	mov	r0, r3
 800295e:	f000 fa9f 	bl	8002ea0 <TIM_OC6_SetConfig>
      break;
 8002962:	e002      	b.n	800296a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	75fb      	strb	r3, [r7, #23]
      break;
 8002968:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002972:	7dfb      	ldrb	r3, [r7, #23]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a2e      	ldr	r2, [pc, #184]	; (8002a48 <TIM_Base_SetConfig+0xcc>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d007      	beq.n	80029a4 <TIM_Base_SetConfig+0x28>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800299a:	d003      	beq.n	80029a4 <TIM_Base_SetConfig+0x28>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a2b      	ldr	r2, [pc, #172]	; (8002a4c <TIM_Base_SetConfig+0xd0>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d108      	bne.n	80029b6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a23      	ldr	r2, [pc, #140]	; (8002a48 <TIM_Base_SetConfig+0xcc>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d00f      	beq.n	80029de <TIM_Base_SetConfig+0x62>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c4:	d00b      	beq.n	80029de <TIM_Base_SetConfig+0x62>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a20      	ldr	r2, [pc, #128]	; (8002a4c <TIM_Base_SetConfig+0xd0>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d007      	beq.n	80029de <TIM_Base_SetConfig+0x62>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a1f      	ldr	r2, [pc, #124]	; (8002a50 <TIM_Base_SetConfig+0xd4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d003      	beq.n	80029de <TIM_Base_SetConfig+0x62>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a1e      	ldr	r2, [pc, #120]	; (8002a54 <TIM_Base_SetConfig+0xd8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d108      	bne.n	80029f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a0c      	ldr	r2, [pc, #48]	; (8002a48 <TIM_Base_SetConfig+0xcc>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d007      	beq.n	8002a2c <TIM_Base_SetConfig+0xb0>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a0c      	ldr	r2, [pc, #48]	; (8002a50 <TIM_Base_SetConfig+0xd4>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d003      	beq.n	8002a2c <TIM_Base_SetConfig+0xb0>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a0b      	ldr	r2, [pc, #44]	; (8002a54 <TIM_Base_SetConfig+0xd8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d103      	bne.n	8002a34 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	615a      	str	r2, [r3, #20]
}
 8002a3a:	bf00      	nop
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40012c00 	.word	0x40012c00
 8002a4c:	40000400 	.word	0x40000400
 8002a50:	40014000 	.word	0x40014000
 8002a54:	40014400 	.word	0x40014400

08002a58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	f023 0201 	bic.w	r2, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f023 0303 	bic.w	r3, r3, #3
 8002a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f023 0302 	bic.w	r3, r3, #2
 8002aa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a24      	ldr	r2, [pc, #144]	; (8002b44 <TIM_OC1_SetConfig+0xec>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d007      	beq.n	8002ac8 <TIM_OC1_SetConfig+0x70>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a23      	ldr	r2, [pc, #140]	; (8002b48 <TIM_OC1_SetConfig+0xf0>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d003      	beq.n	8002ac8 <TIM_OC1_SetConfig+0x70>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a22      	ldr	r2, [pc, #136]	; (8002b4c <TIM_OC1_SetConfig+0xf4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d10c      	bne.n	8002ae2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	f023 0308 	bic.w	r3, r3, #8
 8002ace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f023 0304 	bic.w	r3, r3, #4
 8002ae0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a17      	ldr	r2, [pc, #92]	; (8002b44 <TIM_OC1_SetConfig+0xec>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d007      	beq.n	8002afa <TIM_OC1_SetConfig+0xa2>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a16      	ldr	r2, [pc, #88]	; (8002b48 <TIM_OC1_SetConfig+0xf0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d003      	beq.n	8002afa <TIM_OC1_SetConfig+0xa2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a15      	ldr	r2, [pc, #84]	; (8002b4c <TIM_OC1_SetConfig+0xf4>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d111      	bne.n	8002b1e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	621a      	str	r2, [r3, #32]
}
 8002b38:	bf00      	nop
 8002b3a:	371c      	adds	r7, #28
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	40012c00 	.word	0x40012c00
 8002b48:	40014000 	.word	0x40014000
 8002b4c:	40014400 	.word	0x40014400

08002b50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	f023 0210 	bic.w	r2, r3, #16
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	021b      	lsls	r3, r3, #8
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f023 0320 	bic.w	r3, r3, #32
 8002b9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a22      	ldr	r2, [pc, #136]	; (8002c38 <TIM_OC2_SetConfig+0xe8>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d10d      	bne.n	8002bd0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a19      	ldr	r2, [pc, #100]	; (8002c38 <TIM_OC2_SetConfig+0xe8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d007      	beq.n	8002be8 <TIM_OC2_SetConfig+0x98>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a18      	ldr	r2, [pc, #96]	; (8002c3c <TIM_OC2_SetConfig+0xec>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d003      	beq.n	8002be8 <TIM_OC2_SetConfig+0x98>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a17      	ldr	r2, [pc, #92]	; (8002c40 <TIM_OC2_SetConfig+0xf0>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d113      	bne.n	8002c10 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	621a      	str	r2, [r3, #32]
}
 8002c2a:	bf00      	nop
 8002c2c:	371c      	adds	r7, #28
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40012c00 	.word	0x40012c00
 8002c3c:	40014000 	.word	0x40014000
 8002c40:	40014400 	.word	0x40014400

08002c44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f023 0303 	bic.w	r3, r3, #3
 8002c7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	021b      	lsls	r3, r3, #8
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a21      	ldr	r2, [pc, #132]	; (8002d28 <TIM_OC3_SetConfig+0xe4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d10d      	bne.n	8002cc2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	021b      	lsls	r3, r3, #8
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a18      	ldr	r2, [pc, #96]	; (8002d28 <TIM_OC3_SetConfig+0xe4>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d007      	beq.n	8002cda <TIM_OC3_SetConfig+0x96>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a17      	ldr	r2, [pc, #92]	; (8002d2c <TIM_OC3_SetConfig+0xe8>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d003      	beq.n	8002cda <TIM_OC3_SetConfig+0x96>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a16      	ldr	r2, [pc, #88]	; (8002d30 <TIM_OC3_SetConfig+0xec>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d113      	bne.n	8002d02 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	621a      	str	r2, [r3, #32]
}
 8002d1c:	bf00      	nop
 8002d1e:	371c      	adds	r7, #28
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	40012c00 	.word	0x40012c00
 8002d2c:	40014000 	.word	0x40014000
 8002d30:	40014400 	.word	0x40014400

08002d34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b087      	sub	sp, #28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	021b      	lsls	r3, r3, #8
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	031b      	lsls	r3, r3, #12
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a14      	ldr	r2, [pc, #80]	; (8002de4 <TIM_OC4_SetConfig+0xb0>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d007      	beq.n	8002da8 <TIM_OC4_SetConfig+0x74>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a13      	ldr	r2, [pc, #76]	; (8002de8 <TIM_OC4_SetConfig+0xb4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d003      	beq.n	8002da8 <TIM_OC4_SetConfig+0x74>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a12      	ldr	r2, [pc, #72]	; (8002dec <TIM_OC4_SetConfig+0xb8>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d109      	bne.n	8002dbc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	019b      	lsls	r3, r3, #6
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	621a      	str	r2, [r3, #32]
}
 8002dd6:	bf00      	nop
 8002dd8:	371c      	adds	r7, #28
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40012c00 	.word	0x40012c00
 8002de8:	40014000 	.word	0x40014000
 8002dec:	40014400 	.word	0x40014400

08002df0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002e34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	041b      	lsls	r3, r3, #16
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a13      	ldr	r2, [pc, #76]	; (8002e94 <TIM_OC5_SetConfig+0xa4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d007      	beq.n	8002e5a <TIM_OC5_SetConfig+0x6a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a12      	ldr	r2, [pc, #72]	; (8002e98 <TIM_OC5_SetConfig+0xa8>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d003      	beq.n	8002e5a <TIM_OC5_SetConfig+0x6a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a11      	ldr	r2, [pc, #68]	; (8002e9c <TIM_OC5_SetConfig+0xac>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d109      	bne.n	8002e6e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	021b      	lsls	r3, r3, #8
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	621a      	str	r2, [r3, #32]
}
 8002e88:	bf00      	nop
 8002e8a:	371c      	adds	r7, #28
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	40012c00 	.word	0x40012c00
 8002e98:	40014000 	.word	0x40014000
 8002e9c:	40014400 	.word	0x40014400

08002ea0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	021b      	lsls	r3, r3, #8
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ee6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	051b      	lsls	r3, r3, #20
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a14      	ldr	r2, [pc, #80]	; (8002f48 <TIM_OC6_SetConfig+0xa8>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d007      	beq.n	8002f0c <TIM_OC6_SetConfig+0x6c>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a13      	ldr	r2, [pc, #76]	; (8002f4c <TIM_OC6_SetConfig+0xac>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d003      	beq.n	8002f0c <TIM_OC6_SetConfig+0x6c>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a12      	ldr	r2, [pc, #72]	; (8002f50 <TIM_OC6_SetConfig+0xb0>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d109      	bne.n	8002f20 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	029b      	lsls	r3, r3, #10
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	621a      	str	r2, [r3, #32]
}
 8002f3a:	bf00      	nop
 8002f3c:	371c      	adds	r7, #28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40012c00 	.word	0x40012c00
 8002f4c:	40014000 	.word	0x40014000
 8002f50:	40014400 	.word	0x40014400

08002f54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d101      	bne.n	8002f6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e054      	b.n	8003016 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a24      	ldr	r2, [pc, #144]	; (8003024 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d108      	bne.n	8002fa8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002f9c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a17      	ldr	r2, [pc, #92]	; (8003024 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d00e      	beq.n	8002fea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd4:	d009      	beq.n	8002fea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a13      	ldr	r2, [pc, #76]	; (8003028 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d004      	beq.n	8002fea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a11      	ldr	r2, [pc, #68]	; (800302c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d10c      	bne.n	8003004 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ff0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	40012c00 	.word	0x40012c00
 8003028:	40000400 	.word	0x40000400
 800302c:	40014000 	.word	0x40014000

08003030 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800303a:	2300      	movs	r3, #0
 800303c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003048:	2302      	movs	r3, #2
 800304a:	e060      	b.n	800310e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	4313      	orrs	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	4313      	orrs	r3, r2
 800306e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	4313      	orrs	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4313      	orrs	r3, r2
 800308a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	4313      	orrs	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b2:	4313      	orrs	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	041b      	lsls	r3, r3, #16
 80030c2:	4313      	orrs	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a14      	ldr	r2, [pc, #80]	; (800311c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d115      	bne.n	80030fc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	051b      	lsls	r3, r3, #20
 80030dc:	4313      	orrs	r3, r2
 80030de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40012c00 	.word	0x40012c00

08003120 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e040      	b.n	80031b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003136:	2b00      	cmp	r3, #0
 8003138:	d106      	bne.n	8003148 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7fd fcbc 	bl	8000ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2224      	movs	r2, #36	; 0x24
 800314c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0201 	bic.w	r2, r2, #1
 800315c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f8c0 	bl	80032e4 <UART_SetConfig>
 8003164:	4603      	mov	r3, r0
 8003166:	2b01      	cmp	r3, #1
 8003168:	d101      	bne.n	800316e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e022      	b.n	80031b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fb3a 	bl	80037f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800318a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800319a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 fbc1 	bl	8003934 <UART_CheckIdleState>
 80031b2:	4603      	mov	r3, r0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08a      	sub	sp, #40	; 0x28
 80031c0:	af02      	add	r7, sp, #8
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	603b      	str	r3, [r7, #0]
 80031c8:	4613      	mov	r3, r2
 80031ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031d0:	2b20      	cmp	r3, #32
 80031d2:	f040 8082 	bne.w	80032da <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <HAL_UART_Transmit+0x26>
 80031dc:	88fb      	ldrh	r3, [r7, #6]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e07a      	b.n	80032dc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d101      	bne.n	80031f4 <HAL_UART_Transmit+0x38>
 80031f0:	2302      	movs	r3, #2
 80031f2:	e073      	b.n	80032dc <HAL_UART_Transmit+0x120>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2221      	movs	r2, #33	; 0x21
 8003208:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800320a:	f7fd fdc9 	bl	8000da0 <HAL_GetTick>
 800320e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	88fa      	ldrh	r2, [r7, #6]
 8003214:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	88fa      	ldrh	r2, [r7, #6]
 800321c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003228:	d108      	bne.n	800323c <HAL_UART_Transmit+0x80>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d104      	bne.n	800323c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003232:	2300      	movs	r3, #0
 8003234:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	61bb      	str	r3, [r7, #24]
 800323a:	e003      	b.n	8003244 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003240:	2300      	movs	r3, #0
 8003242:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800324c:	e02d      	b.n	80032aa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	2200      	movs	r2, #0
 8003256:	2180      	movs	r1, #128	; 0x80
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 fbb4 	bl	80039c6 <UART_WaitOnFlagUntilTimeout>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e039      	b.n	80032dc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10b      	bne.n	8003286 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	881a      	ldrh	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800327a:	b292      	uxth	r2, r2
 800327c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	3302      	adds	r3, #2
 8003282:	61bb      	str	r3, [r7, #24]
 8003284:	e008      	b.n	8003298 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	781a      	ldrb	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	b292      	uxth	r2, r2
 8003290:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	3301      	adds	r3, #1
 8003296:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800329e:	b29b      	uxth	r3, r3
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1cb      	bne.n	800324e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2200      	movs	r2, #0
 80032be:	2140      	movs	r1, #64	; 0x40
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 fb80 	bl	80039c6 <UART_WaitOnFlagUntilTimeout>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e005      	b.n	80032dc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2220      	movs	r2, #32
 80032d4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	e000      	b.n	80032dc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80032da:	2302      	movs	r3, #2
  }
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3720      	adds	r7, #32
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032e8:	b08a      	sub	sp, #40	; 0x28
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032ee:	2300      	movs	r3, #0
 80032f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	431a      	orrs	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	431a      	orrs	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	4313      	orrs	r3, r2
 800330a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	4ba5      	ldr	r3, [pc, #660]	; (80035a8 <UART_SetConfig+0x2c4>)
 8003314:	4013      	ands	r3, r2
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	6812      	ldr	r2, [r2, #0]
 800331a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800331c:	430b      	orrs	r3, r1
 800331e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a9a      	ldr	r2, [pc, #616]	; (80035ac <UART_SetConfig+0x2c8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d004      	beq.n	8003350 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800334c:	4313      	orrs	r3, r2
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003360:	430a      	orrs	r2, r1
 8003362:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a91      	ldr	r2, [pc, #580]	; (80035b0 <UART_SetConfig+0x2cc>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d126      	bne.n	80033bc <UART_SetConfig+0xd8>
 800336e:	4b91      	ldr	r3, [pc, #580]	; (80035b4 <UART_SetConfig+0x2d0>)
 8003370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003374:	f003 0303 	and.w	r3, r3, #3
 8003378:	2b03      	cmp	r3, #3
 800337a:	d81b      	bhi.n	80033b4 <UART_SetConfig+0xd0>
 800337c:	a201      	add	r2, pc, #4	; (adr r2, 8003384 <UART_SetConfig+0xa0>)
 800337e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003382:	bf00      	nop
 8003384:	08003395 	.word	0x08003395
 8003388:	080033a5 	.word	0x080033a5
 800338c:	0800339d 	.word	0x0800339d
 8003390:	080033ad 	.word	0x080033ad
 8003394:	2301      	movs	r3, #1
 8003396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800339a:	e0d6      	b.n	800354a <UART_SetConfig+0x266>
 800339c:	2302      	movs	r3, #2
 800339e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033a2:	e0d2      	b.n	800354a <UART_SetConfig+0x266>
 80033a4:	2304      	movs	r3, #4
 80033a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033aa:	e0ce      	b.n	800354a <UART_SetConfig+0x266>
 80033ac:	2308      	movs	r3, #8
 80033ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033b2:	e0ca      	b.n	800354a <UART_SetConfig+0x266>
 80033b4:	2310      	movs	r3, #16
 80033b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ba:	e0c6      	b.n	800354a <UART_SetConfig+0x266>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a7d      	ldr	r2, [pc, #500]	; (80035b8 <UART_SetConfig+0x2d4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d138      	bne.n	8003438 <UART_SetConfig+0x154>
 80033c6:	4b7b      	ldr	r3, [pc, #492]	; (80035b4 <UART_SetConfig+0x2d0>)
 80033c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033cc:	f003 030c 	and.w	r3, r3, #12
 80033d0:	2b0c      	cmp	r3, #12
 80033d2:	d82d      	bhi.n	8003430 <UART_SetConfig+0x14c>
 80033d4:	a201      	add	r2, pc, #4	; (adr r2, 80033dc <UART_SetConfig+0xf8>)
 80033d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033da:	bf00      	nop
 80033dc:	08003411 	.word	0x08003411
 80033e0:	08003431 	.word	0x08003431
 80033e4:	08003431 	.word	0x08003431
 80033e8:	08003431 	.word	0x08003431
 80033ec:	08003421 	.word	0x08003421
 80033f0:	08003431 	.word	0x08003431
 80033f4:	08003431 	.word	0x08003431
 80033f8:	08003431 	.word	0x08003431
 80033fc:	08003419 	.word	0x08003419
 8003400:	08003431 	.word	0x08003431
 8003404:	08003431 	.word	0x08003431
 8003408:	08003431 	.word	0x08003431
 800340c:	08003429 	.word	0x08003429
 8003410:	2300      	movs	r3, #0
 8003412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003416:	e098      	b.n	800354a <UART_SetConfig+0x266>
 8003418:	2302      	movs	r3, #2
 800341a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800341e:	e094      	b.n	800354a <UART_SetConfig+0x266>
 8003420:	2304      	movs	r3, #4
 8003422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003426:	e090      	b.n	800354a <UART_SetConfig+0x266>
 8003428:	2308      	movs	r3, #8
 800342a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800342e:	e08c      	b.n	800354a <UART_SetConfig+0x266>
 8003430:	2310      	movs	r3, #16
 8003432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003436:	e088      	b.n	800354a <UART_SetConfig+0x266>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a5f      	ldr	r2, [pc, #380]	; (80035bc <UART_SetConfig+0x2d8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d125      	bne.n	800348e <UART_SetConfig+0x1aa>
 8003442:	4b5c      	ldr	r3, [pc, #368]	; (80035b4 <UART_SetConfig+0x2d0>)
 8003444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003448:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800344c:	2b30      	cmp	r3, #48	; 0x30
 800344e:	d016      	beq.n	800347e <UART_SetConfig+0x19a>
 8003450:	2b30      	cmp	r3, #48	; 0x30
 8003452:	d818      	bhi.n	8003486 <UART_SetConfig+0x1a2>
 8003454:	2b20      	cmp	r3, #32
 8003456:	d00a      	beq.n	800346e <UART_SetConfig+0x18a>
 8003458:	2b20      	cmp	r3, #32
 800345a:	d814      	bhi.n	8003486 <UART_SetConfig+0x1a2>
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <UART_SetConfig+0x182>
 8003460:	2b10      	cmp	r3, #16
 8003462:	d008      	beq.n	8003476 <UART_SetConfig+0x192>
 8003464:	e00f      	b.n	8003486 <UART_SetConfig+0x1a2>
 8003466:	2300      	movs	r3, #0
 8003468:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800346c:	e06d      	b.n	800354a <UART_SetConfig+0x266>
 800346e:	2302      	movs	r3, #2
 8003470:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003474:	e069      	b.n	800354a <UART_SetConfig+0x266>
 8003476:	2304      	movs	r3, #4
 8003478:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800347c:	e065      	b.n	800354a <UART_SetConfig+0x266>
 800347e:	2308      	movs	r3, #8
 8003480:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003484:	e061      	b.n	800354a <UART_SetConfig+0x266>
 8003486:	2310      	movs	r3, #16
 8003488:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800348c:	e05d      	b.n	800354a <UART_SetConfig+0x266>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a4b      	ldr	r2, [pc, #300]	; (80035c0 <UART_SetConfig+0x2dc>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d125      	bne.n	80034e4 <UART_SetConfig+0x200>
 8003498:	4b46      	ldr	r3, [pc, #280]	; (80035b4 <UART_SetConfig+0x2d0>)
 800349a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80034a2:	2bc0      	cmp	r3, #192	; 0xc0
 80034a4:	d016      	beq.n	80034d4 <UART_SetConfig+0x1f0>
 80034a6:	2bc0      	cmp	r3, #192	; 0xc0
 80034a8:	d818      	bhi.n	80034dc <UART_SetConfig+0x1f8>
 80034aa:	2b80      	cmp	r3, #128	; 0x80
 80034ac:	d00a      	beq.n	80034c4 <UART_SetConfig+0x1e0>
 80034ae:	2b80      	cmp	r3, #128	; 0x80
 80034b0:	d814      	bhi.n	80034dc <UART_SetConfig+0x1f8>
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d002      	beq.n	80034bc <UART_SetConfig+0x1d8>
 80034b6:	2b40      	cmp	r3, #64	; 0x40
 80034b8:	d008      	beq.n	80034cc <UART_SetConfig+0x1e8>
 80034ba:	e00f      	b.n	80034dc <UART_SetConfig+0x1f8>
 80034bc:	2300      	movs	r3, #0
 80034be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034c2:	e042      	b.n	800354a <UART_SetConfig+0x266>
 80034c4:	2302      	movs	r3, #2
 80034c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ca:	e03e      	b.n	800354a <UART_SetConfig+0x266>
 80034cc:	2304      	movs	r3, #4
 80034ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034d2:	e03a      	b.n	800354a <UART_SetConfig+0x266>
 80034d4:	2308      	movs	r3, #8
 80034d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034da:	e036      	b.n	800354a <UART_SetConfig+0x266>
 80034dc:	2310      	movs	r3, #16
 80034de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034e2:	e032      	b.n	800354a <UART_SetConfig+0x266>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a30      	ldr	r2, [pc, #192]	; (80035ac <UART_SetConfig+0x2c8>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d12a      	bne.n	8003544 <UART_SetConfig+0x260>
 80034ee:	4b31      	ldr	r3, [pc, #196]	; (80035b4 <UART_SetConfig+0x2d0>)
 80034f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80034f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034fc:	d01a      	beq.n	8003534 <UART_SetConfig+0x250>
 80034fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003502:	d81b      	bhi.n	800353c <UART_SetConfig+0x258>
 8003504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003508:	d00c      	beq.n	8003524 <UART_SetConfig+0x240>
 800350a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800350e:	d815      	bhi.n	800353c <UART_SetConfig+0x258>
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <UART_SetConfig+0x238>
 8003514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003518:	d008      	beq.n	800352c <UART_SetConfig+0x248>
 800351a:	e00f      	b.n	800353c <UART_SetConfig+0x258>
 800351c:	2300      	movs	r3, #0
 800351e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003522:	e012      	b.n	800354a <UART_SetConfig+0x266>
 8003524:	2302      	movs	r3, #2
 8003526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800352a:	e00e      	b.n	800354a <UART_SetConfig+0x266>
 800352c:	2304      	movs	r3, #4
 800352e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003532:	e00a      	b.n	800354a <UART_SetConfig+0x266>
 8003534:	2308      	movs	r3, #8
 8003536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800353a:	e006      	b.n	800354a <UART_SetConfig+0x266>
 800353c:	2310      	movs	r3, #16
 800353e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003542:	e002      	b.n	800354a <UART_SetConfig+0x266>
 8003544:	2310      	movs	r3, #16
 8003546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a17      	ldr	r2, [pc, #92]	; (80035ac <UART_SetConfig+0x2c8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	f040 808b 	bne.w	800366c <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003556:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800355a:	2b08      	cmp	r3, #8
 800355c:	d834      	bhi.n	80035c8 <UART_SetConfig+0x2e4>
 800355e:	a201      	add	r2, pc, #4	; (adr r2, 8003564 <UART_SetConfig+0x280>)
 8003560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003564:	08003589 	.word	0x08003589
 8003568:	080035c9 	.word	0x080035c9
 800356c:	08003591 	.word	0x08003591
 8003570:	080035c9 	.word	0x080035c9
 8003574:	08003597 	.word	0x08003597
 8003578:	080035c9 	.word	0x080035c9
 800357c:	080035c9 	.word	0x080035c9
 8003580:	080035c9 	.word	0x080035c9
 8003584:	0800359f 	.word	0x0800359f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003588:	f7fe fce2 	bl	8001f50 <HAL_RCC_GetPCLK1Freq>
 800358c:	61f8      	str	r0, [r7, #28]
        break;
 800358e:	e021      	b.n	80035d4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003590:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <UART_SetConfig+0x2e0>)
 8003592:	61fb      	str	r3, [r7, #28]
        break;
 8003594:	e01e      	b.n	80035d4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003596:	f7fe fc43 	bl	8001e20 <HAL_RCC_GetSysClockFreq>
 800359a:	61f8      	str	r0, [r7, #28]
        break;
 800359c:	e01a      	b.n	80035d4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800359e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035a2:	61fb      	str	r3, [r7, #28]
        break;
 80035a4:	e016      	b.n	80035d4 <UART_SetConfig+0x2f0>
 80035a6:	bf00      	nop
 80035a8:	efff69f3 	.word	0xefff69f3
 80035ac:	40008000 	.word	0x40008000
 80035b0:	40013800 	.word	0x40013800
 80035b4:	40021000 	.word	0x40021000
 80035b8:	40004400 	.word	0x40004400
 80035bc:	40004800 	.word	0x40004800
 80035c0:	40004c00 	.word	0x40004c00
 80035c4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80035d2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 80fa 	beq.w	80037d0 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	4613      	mov	r3, r2
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	4413      	add	r3, r2
 80035e6:	69fa      	ldr	r2, [r7, #28]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d305      	bcc.n	80035f8 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80035f2:	69fa      	ldr	r2, [r7, #28]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d903      	bls.n	8003600 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80035fe:	e0e7      	b.n	80037d0 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	2200      	movs	r2, #0
 8003604:	461c      	mov	r4, r3
 8003606:	4615      	mov	r5, r2
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	022b      	lsls	r3, r5, #8
 8003612:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003616:	0222      	lsls	r2, r4, #8
 8003618:	68f9      	ldr	r1, [r7, #12]
 800361a:	6849      	ldr	r1, [r1, #4]
 800361c:	0849      	lsrs	r1, r1, #1
 800361e:	2000      	movs	r0, #0
 8003620:	4688      	mov	r8, r1
 8003622:	4681      	mov	r9, r0
 8003624:	eb12 0a08 	adds.w	sl, r2, r8
 8003628:	eb43 0b09 	adc.w	fp, r3, r9
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	603b      	str	r3, [r7, #0]
 8003634:	607a      	str	r2, [r7, #4]
 8003636:	e9d7 2300 	ldrd	r2, r3, [r7]
 800363a:	4650      	mov	r0, sl
 800363c:	4659      	mov	r1, fp
 800363e:	f7fc fe1f 	bl	8000280 <__aeabi_uldivmod>
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	4613      	mov	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003650:	d308      	bcc.n	8003664 <UART_SetConfig+0x380>
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003658:	d204      	bcs.n	8003664 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	60da      	str	r2, [r3, #12]
 8003662:	e0b5      	b.n	80037d0 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800366a:	e0b1      	b.n	80037d0 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003674:	d15d      	bne.n	8003732 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8003676:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800367a:	2b08      	cmp	r3, #8
 800367c:	d827      	bhi.n	80036ce <UART_SetConfig+0x3ea>
 800367e:	a201      	add	r2, pc, #4	; (adr r2, 8003684 <UART_SetConfig+0x3a0>)
 8003680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003684:	080036a9 	.word	0x080036a9
 8003688:	080036b1 	.word	0x080036b1
 800368c:	080036b9 	.word	0x080036b9
 8003690:	080036cf 	.word	0x080036cf
 8003694:	080036bf 	.word	0x080036bf
 8003698:	080036cf 	.word	0x080036cf
 800369c:	080036cf 	.word	0x080036cf
 80036a0:	080036cf 	.word	0x080036cf
 80036a4:	080036c7 	.word	0x080036c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036a8:	f7fe fc52 	bl	8001f50 <HAL_RCC_GetPCLK1Freq>
 80036ac:	61f8      	str	r0, [r7, #28]
        break;
 80036ae:	e014      	b.n	80036da <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036b0:	f7fe fc64 	bl	8001f7c <HAL_RCC_GetPCLK2Freq>
 80036b4:	61f8      	str	r0, [r7, #28]
        break;
 80036b6:	e010      	b.n	80036da <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036b8:	4b4c      	ldr	r3, [pc, #304]	; (80037ec <UART_SetConfig+0x508>)
 80036ba:	61fb      	str	r3, [r7, #28]
        break;
 80036bc:	e00d      	b.n	80036da <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036be:	f7fe fbaf 	bl	8001e20 <HAL_RCC_GetSysClockFreq>
 80036c2:	61f8      	str	r0, [r7, #28]
        break;
 80036c4:	e009      	b.n	80036da <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ca:	61fb      	str	r3, [r7, #28]
        break;
 80036cc:	e005      	b.n	80036da <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80036d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d077      	beq.n	80037d0 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	005a      	lsls	r2, r3, #1
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	085b      	lsrs	r3, r3, #1
 80036ea:	441a      	add	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	2b0f      	cmp	r3, #15
 80036fa:	d916      	bls.n	800372a <UART_SetConfig+0x446>
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003702:	d212      	bcs.n	800372a <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	b29b      	uxth	r3, r3
 8003708:	f023 030f 	bic.w	r3, r3, #15
 800370c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	085b      	lsrs	r3, r3, #1
 8003712:	b29b      	uxth	r3, r3
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	b29a      	uxth	r2, r3
 800371a:	8afb      	ldrh	r3, [r7, #22]
 800371c:	4313      	orrs	r3, r2
 800371e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	8afa      	ldrh	r2, [r7, #22]
 8003726:	60da      	str	r2, [r3, #12]
 8003728:	e052      	b.n	80037d0 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003730:	e04e      	b.n	80037d0 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003732:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003736:	2b08      	cmp	r3, #8
 8003738:	d827      	bhi.n	800378a <UART_SetConfig+0x4a6>
 800373a:	a201      	add	r2, pc, #4	; (adr r2, 8003740 <UART_SetConfig+0x45c>)
 800373c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003740:	08003765 	.word	0x08003765
 8003744:	0800376d 	.word	0x0800376d
 8003748:	08003775 	.word	0x08003775
 800374c:	0800378b 	.word	0x0800378b
 8003750:	0800377b 	.word	0x0800377b
 8003754:	0800378b 	.word	0x0800378b
 8003758:	0800378b 	.word	0x0800378b
 800375c:	0800378b 	.word	0x0800378b
 8003760:	08003783 	.word	0x08003783
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003764:	f7fe fbf4 	bl	8001f50 <HAL_RCC_GetPCLK1Freq>
 8003768:	61f8      	str	r0, [r7, #28]
        break;
 800376a:	e014      	b.n	8003796 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800376c:	f7fe fc06 	bl	8001f7c <HAL_RCC_GetPCLK2Freq>
 8003770:	61f8      	str	r0, [r7, #28]
        break;
 8003772:	e010      	b.n	8003796 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003774:	4b1d      	ldr	r3, [pc, #116]	; (80037ec <UART_SetConfig+0x508>)
 8003776:	61fb      	str	r3, [r7, #28]
        break;
 8003778:	e00d      	b.n	8003796 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800377a:	f7fe fb51 	bl	8001e20 <HAL_RCC_GetSysClockFreq>
 800377e:	61f8      	str	r0, [r7, #28]
        break;
 8003780:	e009      	b.n	8003796 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003786:	61fb      	str	r3, [r7, #28]
        break;
 8003788:	e005      	b.n	8003796 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 800378a:	2300      	movs	r3, #0
 800378c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003794:	bf00      	nop
    }

    if (pclk != 0U)
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d019      	beq.n	80037d0 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	085a      	lsrs	r2, r3, #1
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	441a      	add	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	2b0f      	cmp	r3, #15
 80037b4:	d909      	bls.n	80037ca <UART_SetConfig+0x4e6>
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037bc:	d205      	bcs.n	80037ca <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	60da      	str	r2, [r3, #12]
 80037c8:	e002      	b.n	80037d0 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80037dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3728      	adds	r7, #40	; 0x28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ea:	bf00      	nop
 80037ec:	00f42400 	.word	0x00f42400

080037f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00a      	beq.n	800385e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	f003 0320 	and.w	r3, r3, #32
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d01a      	beq.n	8003906 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ee:	d10a      	bne.n	8003906 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	605a      	str	r2, [r3, #4]
  }
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af02      	add	r7, sp, #8
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003944:	f7fd fa2c 	bl	8000da0 <HAL_GetTick>
 8003948:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b08      	cmp	r3, #8
 8003956:	d10e      	bne.n	8003976 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003958:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f82d 	bl	80039c6 <UART_WaitOnFlagUntilTimeout>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e023      	b.n	80039be <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b04      	cmp	r3, #4
 8003982:	d10e      	bne.n	80039a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003984:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f817 	bl	80039c6 <UART_WaitOnFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e00d      	b.n	80039be <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2220      	movs	r2, #32
 80039a6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2220      	movs	r2, #32
 80039ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b09c      	sub	sp, #112	; 0x70
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	60f8      	str	r0, [r7, #12]
 80039ce:	60b9      	str	r1, [r7, #8]
 80039d0:	603b      	str	r3, [r7, #0]
 80039d2:	4613      	mov	r3, r2
 80039d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039d6:	e0a5      	b.n	8003b24 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039de:	f000 80a1 	beq.w	8003b24 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e2:	f7fd f9dd 	bl	8000da0 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d302      	bcc.n	80039f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80039f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d13e      	bne.n	8003a76 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a00:	e853 3f00 	ldrex	r3, [r3]
 8003a04:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a0c:	667b      	str	r3, [r7, #100]	; 0x64
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	461a      	mov	r2, r3
 8003a14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a18:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a1e:	e841 2300 	strex	r3, r2, [r1]
 8003a22:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1e6      	bne.n	80039f8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	3308      	adds	r3, #8
 8003a30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a34:	e853 3f00 	ldrex	r3, [r3]
 8003a38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3c:	f023 0301 	bic.w	r3, r3, #1
 8003a40:	663b      	str	r3, [r7, #96]	; 0x60
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	3308      	adds	r3, #8
 8003a48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a4a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a52:	e841 2300 	strex	r3, r2, [r1]
 8003a56:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1e5      	bne.n	8003a2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2220      	movs	r2, #32
 8003a62:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2220      	movs	r2, #32
 8003a68:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e067      	b.n	8003b46 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d04f      	beq.n	8003b24 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a92:	d147      	bne.n	8003b24 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a9c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa6:	e853 3f00 	ldrex	r3, [r3]
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ab2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003abc:	637b      	str	r3, [r7, #52]	; 0x34
 8003abe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ac2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ac4:	e841 2300 	strex	r3, r2, [r1]
 8003ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e6      	bne.n	8003a9e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3308      	adds	r3, #8
 8003ad6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	e853 3f00 	ldrex	r3, [r3]
 8003ade:	613b      	str	r3, [r7, #16]
   return(result);
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	f023 0301 	bic.w	r3, r3, #1
 8003ae6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	3308      	adds	r3, #8
 8003aee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003af0:	623a      	str	r2, [r7, #32]
 8003af2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af4:	69f9      	ldr	r1, [r7, #28]
 8003af6:	6a3a      	ldr	r2, [r7, #32]
 8003af8:	e841 2300 	strex	r3, r2, [r1]
 8003afc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1e5      	bne.n	8003ad0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2220      	movs	r2, #32
 8003b08:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e010      	b.n	8003b46 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	69da      	ldr	r2, [r3, #28]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	bf0c      	ite	eq
 8003b34:	2301      	moveq	r3, #1
 8003b36:	2300      	movne	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	79fb      	ldrb	r3, [r7, #7]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	f43f af4a 	beq.w	80039d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3770      	adds	r7, #112	; 0x70
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
	...

08003b50 <__errno>:
 8003b50:	4b01      	ldr	r3, [pc, #4]	; (8003b58 <__errno+0x8>)
 8003b52:	6818      	ldr	r0, [r3, #0]
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	200007e0 	.word	0x200007e0

08003b5c <__libc_init_array>:
 8003b5c:	b570      	push	{r4, r5, r6, lr}
 8003b5e:	4d0d      	ldr	r5, [pc, #52]	; (8003b94 <__libc_init_array+0x38>)
 8003b60:	4c0d      	ldr	r4, [pc, #52]	; (8003b98 <__libc_init_array+0x3c>)
 8003b62:	1b64      	subs	r4, r4, r5
 8003b64:	10a4      	asrs	r4, r4, #2
 8003b66:	2600      	movs	r6, #0
 8003b68:	42a6      	cmp	r6, r4
 8003b6a:	d109      	bne.n	8003b80 <__libc_init_array+0x24>
 8003b6c:	4d0b      	ldr	r5, [pc, #44]	; (8003b9c <__libc_init_array+0x40>)
 8003b6e:	4c0c      	ldr	r4, [pc, #48]	; (8003ba0 <__libc_init_array+0x44>)
 8003b70:	f000 fc8e 	bl	8004490 <_init>
 8003b74:	1b64      	subs	r4, r4, r5
 8003b76:	10a4      	asrs	r4, r4, #2
 8003b78:	2600      	movs	r6, #0
 8003b7a:	42a6      	cmp	r6, r4
 8003b7c:	d105      	bne.n	8003b8a <__libc_init_array+0x2e>
 8003b7e:	bd70      	pop	{r4, r5, r6, pc}
 8003b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b84:	4798      	blx	r3
 8003b86:	3601      	adds	r6, #1
 8003b88:	e7ee      	b.n	8003b68 <__libc_init_array+0xc>
 8003b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b8e:	4798      	blx	r3
 8003b90:	3601      	adds	r6, #1
 8003b92:	e7f2      	b.n	8003b7a <__libc_init_array+0x1e>
 8003b94:	08004548 	.word	0x08004548
 8003b98:	08004548 	.word	0x08004548
 8003b9c:	08004548 	.word	0x08004548
 8003ba0:	0800454c 	.word	0x0800454c

08003ba4 <memset>:
 8003ba4:	4402      	add	r2, r0
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d100      	bne.n	8003bae <memset+0xa>
 8003bac:	4770      	bx	lr
 8003bae:	f803 1b01 	strb.w	r1, [r3], #1
 8003bb2:	e7f9      	b.n	8003ba8 <memset+0x4>

08003bb4 <siprintf>:
 8003bb4:	b40e      	push	{r1, r2, r3}
 8003bb6:	b500      	push	{lr}
 8003bb8:	b09c      	sub	sp, #112	; 0x70
 8003bba:	ab1d      	add	r3, sp, #116	; 0x74
 8003bbc:	9002      	str	r0, [sp, #8]
 8003bbe:	9006      	str	r0, [sp, #24]
 8003bc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003bc4:	4809      	ldr	r0, [pc, #36]	; (8003bec <siprintf+0x38>)
 8003bc6:	9107      	str	r1, [sp, #28]
 8003bc8:	9104      	str	r1, [sp, #16]
 8003bca:	4909      	ldr	r1, [pc, #36]	; (8003bf0 <siprintf+0x3c>)
 8003bcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bd0:	9105      	str	r1, [sp, #20]
 8003bd2:	6800      	ldr	r0, [r0, #0]
 8003bd4:	9301      	str	r3, [sp, #4]
 8003bd6:	a902      	add	r1, sp, #8
 8003bd8:	f000 f868 	bl	8003cac <_svfiprintf_r>
 8003bdc:	9b02      	ldr	r3, [sp, #8]
 8003bde:	2200      	movs	r2, #0
 8003be0:	701a      	strb	r2, [r3, #0]
 8003be2:	b01c      	add	sp, #112	; 0x70
 8003be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003be8:	b003      	add	sp, #12
 8003bea:	4770      	bx	lr
 8003bec:	200007e0 	.word	0x200007e0
 8003bf0:	ffff0208 	.word	0xffff0208

08003bf4 <__ssputs_r>:
 8003bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bf8:	688e      	ldr	r6, [r1, #8]
 8003bfa:	429e      	cmp	r6, r3
 8003bfc:	4682      	mov	sl, r0
 8003bfe:	460c      	mov	r4, r1
 8003c00:	4690      	mov	r8, r2
 8003c02:	461f      	mov	r7, r3
 8003c04:	d838      	bhi.n	8003c78 <__ssputs_r+0x84>
 8003c06:	898a      	ldrh	r2, [r1, #12]
 8003c08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c0c:	d032      	beq.n	8003c74 <__ssputs_r+0x80>
 8003c0e:	6825      	ldr	r5, [r4, #0]
 8003c10:	6909      	ldr	r1, [r1, #16]
 8003c12:	eba5 0901 	sub.w	r9, r5, r1
 8003c16:	6965      	ldr	r5, [r4, #20]
 8003c18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c20:	3301      	adds	r3, #1
 8003c22:	444b      	add	r3, r9
 8003c24:	106d      	asrs	r5, r5, #1
 8003c26:	429d      	cmp	r5, r3
 8003c28:	bf38      	it	cc
 8003c2a:	461d      	movcc	r5, r3
 8003c2c:	0553      	lsls	r3, r2, #21
 8003c2e:	d531      	bpl.n	8003c94 <__ssputs_r+0xa0>
 8003c30:	4629      	mov	r1, r5
 8003c32:	f000 fb63 	bl	80042fc <_malloc_r>
 8003c36:	4606      	mov	r6, r0
 8003c38:	b950      	cbnz	r0, 8003c50 <__ssputs_r+0x5c>
 8003c3a:	230c      	movs	r3, #12
 8003c3c:	f8ca 3000 	str.w	r3, [sl]
 8003c40:	89a3      	ldrh	r3, [r4, #12]
 8003c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c46:	81a3      	strh	r3, [r4, #12]
 8003c48:	f04f 30ff 	mov.w	r0, #4294967295
 8003c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c50:	6921      	ldr	r1, [r4, #16]
 8003c52:	464a      	mov	r2, r9
 8003c54:	f000 fabe 	bl	80041d4 <memcpy>
 8003c58:	89a3      	ldrh	r3, [r4, #12]
 8003c5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c62:	81a3      	strh	r3, [r4, #12]
 8003c64:	6126      	str	r6, [r4, #16]
 8003c66:	6165      	str	r5, [r4, #20]
 8003c68:	444e      	add	r6, r9
 8003c6a:	eba5 0509 	sub.w	r5, r5, r9
 8003c6e:	6026      	str	r6, [r4, #0]
 8003c70:	60a5      	str	r5, [r4, #8]
 8003c72:	463e      	mov	r6, r7
 8003c74:	42be      	cmp	r6, r7
 8003c76:	d900      	bls.n	8003c7a <__ssputs_r+0x86>
 8003c78:	463e      	mov	r6, r7
 8003c7a:	6820      	ldr	r0, [r4, #0]
 8003c7c:	4632      	mov	r2, r6
 8003c7e:	4641      	mov	r1, r8
 8003c80:	f000 fab6 	bl	80041f0 <memmove>
 8003c84:	68a3      	ldr	r3, [r4, #8]
 8003c86:	1b9b      	subs	r3, r3, r6
 8003c88:	60a3      	str	r3, [r4, #8]
 8003c8a:	6823      	ldr	r3, [r4, #0]
 8003c8c:	4433      	add	r3, r6
 8003c8e:	6023      	str	r3, [r4, #0]
 8003c90:	2000      	movs	r0, #0
 8003c92:	e7db      	b.n	8003c4c <__ssputs_r+0x58>
 8003c94:	462a      	mov	r2, r5
 8003c96:	f000 fba5 	bl	80043e4 <_realloc_r>
 8003c9a:	4606      	mov	r6, r0
 8003c9c:	2800      	cmp	r0, #0
 8003c9e:	d1e1      	bne.n	8003c64 <__ssputs_r+0x70>
 8003ca0:	6921      	ldr	r1, [r4, #16]
 8003ca2:	4650      	mov	r0, sl
 8003ca4:	f000 fabe 	bl	8004224 <_free_r>
 8003ca8:	e7c7      	b.n	8003c3a <__ssputs_r+0x46>
	...

08003cac <_svfiprintf_r>:
 8003cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cb0:	4698      	mov	r8, r3
 8003cb2:	898b      	ldrh	r3, [r1, #12]
 8003cb4:	061b      	lsls	r3, r3, #24
 8003cb6:	b09d      	sub	sp, #116	; 0x74
 8003cb8:	4607      	mov	r7, r0
 8003cba:	460d      	mov	r5, r1
 8003cbc:	4614      	mov	r4, r2
 8003cbe:	d50e      	bpl.n	8003cde <_svfiprintf_r+0x32>
 8003cc0:	690b      	ldr	r3, [r1, #16]
 8003cc2:	b963      	cbnz	r3, 8003cde <_svfiprintf_r+0x32>
 8003cc4:	2140      	movs	r1, #64	; 0x40
 8003cc6:	f000 fb19 	bl	80042fc <_malloc_r>
 8003cca:	6028      	str	r0, [r5, #0]
 8003ccc:	6128      	str	r0, [r5, #16]
 8003cce:	b920      	cbnz	r0, 8003cda <_svfiprintf_r+0x2e>
 8003cd0:	230c      	movs	r3, #12
 8003cd2:	603b      	str	r3, [r7, #0]
 8003cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd8:	e0d1      	b.n	8003e7e <_svfiprintf_r+0x1d2>
 8003cda:	2340      	movs	r3, #64	; 0x40
 8003cdc:	616b      	str	r3, [r5, #20]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8003ce2:	2320      	movs	r3, #32
 8003ce4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ce8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cec:	2330      	movs	r3, #48	; 0x30
 8003cee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003e98 <_svfiprintf_r+0x1ec>
 8003cf2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003cf6:	f04f 0901 	mov.w	r9, #1
 8003cfa:	4623      	mov	r3, r4
 8003cfc:	469a      	mov	sl, r3
 8003cfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d02:	b10a      	cbz	r2, 8003d08 <_svfiprintf_r+0x5c>
 8003d04:	2a25      	cmp	r2, #37	; 0x25
 8003d06:	d1f9      	bne.n	8003cfc <_svfiprintf_r+0x50>
 8003d08:	ebba 0b04 	subs.w	fp, sl, r4
 8003d0c:	d00b      	beq.n	8003d26 <_svfiprintf_r+0x7a>
 8003d0e:	465b      	mov	r3, fp
 8003d10:	4622      	mov	r2, r4
 8003d12:	4629      	mov	r1, r5
 8003d14:	4638      	mov	r0, r7
 8003d16:	f7ff ff6d 	bl	8003bf4 <__ssputs_r>
 8003d1a:	3001      	adds	r0, #1
 8003d1c:	f000 80aa 	beq.w	8003e74 <_svfiprintf_r+0x1c8>
 8003d20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d22:	445a      	add	r2, fp
 8003d24:	9209      	str	r2, [sp, #36]	; 0x24
 8003d26:	f89a 3000 	ldrb.w	r3, [sl]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 80a2 	beq.w	8003e74 <_svfiprintf_r+0x1c8>
 8003d30:	2300      	movs	r3, #0
 8003d32:	f04f 32ff 	mov.w	r2, #4294967295
 8003d36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d3a:	f10a 0a01 	add.w	sl, sl, #1
 8003d3e:	9304      	str	r3, [sp, #16]
 8003d40:	9307      	str	r3, [sp, #28]
 8003d42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d46:	931a      	str	r3, [sp, #104]	; 0x68
 8003d48:	4654      	mov	r4, sl
 8003d4a:	2205      	movs	r2, #5
 8003d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d50:	4851      	ldr	r0, [pc, #324]	; (8003e98 <_svfiprintf_r+0x1ec>)
 8003d52:	f7fc fa45 	bl	80001e0 <memchr>
 8003d56:	9a04      	ldr	r2, [sp, #16]
 8003d58:	b9d8      	cbnz	r0, 8003d92 <_svfiprintf_r+0xe6>
 8003d5a:	06d0      	lsls	r0, r2, #27
 8003d5c:	bf44      	itt	mi
 8003d5e:	2320      	movmi	r3, #32
 8003d60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d64:	0711      	lsls	r1, r2, #28
 8003d66:	bf44      	itt	mi
 8003d68:	232b      	movmi	r3, #43	; 0x2b
 8003d6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d6e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d72:	2b2a      	cmp	r3, #42	; 0x2a
 8003d74:	d015      	beq.n	8003da2 <_svfiprintf_r+0xf6>
 8003d76:	9a07      	ldr	r2, [sp, #28]
 8003d78:	4654      	mov	r4, sl
 8003d7a:	2000      	movs	r0, #0
 8003d7c:	f04f 0c0a 	mov.w	ip, #10
 8003d80:	4621      	mov	r1, r4
 8003d82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d86:	3b30      	subs	r3, #48	; 0x30
 8003d88:	2b09      	cmp	r3, #9
 8003d8a:	d94e      	bls.n	8003e2a <_svfiprintf_r+0x17e>
 8003d8c:	b1b0      	cbz	r0, 8003dbc <_svfiprintf_r+0x110>
 8003d8e:	9207      	str	r2, [sp, #28]
 8003d90:	e014      	b.n	8003dbc <_svfiprintf_r+0x110>
 8003d92:	eba0 0308 	sub.w	r3, r0, r8
 8003d96:	fa09 f303 	lsl.w	r3, r9, r3
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	9304      	str	r3, [sp, #16]
 8003d9e:	46a2      	mov	sl, r4
 8003da0:	e7d2      	b.n	8003d48 <_svfiprintf_r+0x9c>
 8003da2:	9b03      	ldr	r3, [sp, #12]
 8003da4:	1d19      	adds	r1, r3, #4
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	9103      	str	r1, [sp, #12]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	bfbb      	ittet	lt
 8003dae:	425b      	neglt	r3, r3
 8003db0:	f042 0202 	orrlt.w	r2, r2, #2
 8003db4:	9307      	strge	r3, [sp, #28]
 8003db6:	9307      	strlt	r3, [sp, #28]
 8003db8:	bfb8      	it	lt
 8003dba:	9204      	strlt	r2, [sp, #16]
 8003dbc:	7823      	ldrb	r3, [r4, #0]
 8003dbe:	2b2e      	cmp	r3, #46	; 0x2e
 8003dc0:	d10c      	bne.n	8003ddc <_svfiprintf_r+0x130>
 8003dc2:	7863      	ldrb	r3, [r4, #1]
 8003dc4:	2b2a      	cmp	r3, #42	; 0x2a
 8003dc6:	d135      	bne.n	8003e34 <_svfiprintf_r+0x188>
 8003dc8:	9b03      	ldr	r3, [sp, #12]
 8003dca:	1d1a      	adds	r2, r3, #4
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	9203      	str	r2, [sp, #12]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	bfb8      	it	lt
 8003dd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003dd8:	3402      	adds	r4, #2
 8003dda:	9305      	str	r3, [sp, #20]
 8003ddc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003ea8 <_svfiprintf_r+0x1fc>
 8003de0:	7821      	ldrb	r1, [r4, #0]
 8003de2:	2203      	movs	r2, #3
 8003de4:	4650      	mov	r0, sl
 8003de6:	f7fc f9fb 	bl	80001e0 <memchr>
 8003dea:	b140      	cbz	r0, 8003dfe <_svfiprintf_r+0x152>
 8003dec:	2340      	movs	r3, #64	; 0x40
 8003dee:	eba0 000a 	sub.w	r0, r0, sl
 8003df2:	fa03 f000 	lsl.w	r0, r3, r0
 8003df6:	9b04      	ldr	r3, [sp, #16]
 8003df8:	4303      	orrs	r3, r0
 8003dfa:	3401      	adds	r4, #1
 8003dfc:	9304      	str	r3, [sp, #16]
 8003dfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e02:	4826      	ldr	r0, [pc, #152]	; (8003e9c <_svfiprintf_r+0x1f0>)
 8003e04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e08:	2206      	movs	r2, #6
 8003e0a:	f7fc f9e9 	bl	80001e0 <memchr>
 8003e0e:	2800      	cmp	r0, #0
 8003e10:	d038      	beq.n	8003e84 <_svfiprintf_r+0x1d8>
 8003e12:	4b23      	ldr	r3, [pc, #140]	; (8003ea0 <_svfiprintf_r+0x1f4>)
 8003e14:	bb1b      	cbnz	r3, 8003e5e <_svfiprintf_r+0x1b2>
 8003e16:	9b03      	ldr	r3, [sp, #12]
 8003e18:	3307      	adds	r3, #7
 8003e1a:	f023 0307 	bic.w	r3, r3, #7
 8003e1e:	3308      	adds	r3, #8
 8003e20:	9303      	str	r3, [sp, #12]
 8003e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e24:	4433      	add	r3, r6
 8003e26:	9309      	str	r3, [sp, #36]	; 0x24
 8003e28:	e767      	b.n	8003cfa <_svfiprintf_r+0x4e>
 8003e2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e2e:	460c      	mov	r4, r1
 8003e30:	2001      	movs	r0, #1
 8003e32:	e7a5      	b.n	8003d80 <_svfiprintf_r+0xd4>
 8003e34:	2300      	movs	r3, #0
 8003e36:	3401      	adds	r4, #1
 8003e38:	9305      	str	r3, [sp, #20]
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	f04f 0c0a 	mov.w	ip, #10
 8003e40:	4620      	mov	r0, r4
 8003e42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e46:	3a30      	subs	r2, #48	; 0x30
 8003e48:	2a09      	cmp	r2, #9
 8003e4a:	d903      	bls.n	8003e54 <_svfiprintf_r+0x1a8>
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0c5      	beq.n	8003ddc <_svfiprintf_r+0x130>
 8003e50:	9105      	str	r1, [sp, #20]
 8003e52:	e7c3      	b.n	8003ddc <_svfiprintf_r+0x130>
 8003e54:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e58:	4604      	mov	r4, r0
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e7f0      	b.n	8003e40 <_svfiprintf_r+0x194>
 8003e5e:	ab03      	add	r3, sp, #12
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	462a      	mov	r2, r5
 8003e64:	4b0f      	ldr	r3, [pc, #60]	; (8003ea4 <_svfiprintf_r+0x1f8>)
 8003e66:	a904      	add	r1, sp, #16
 8003e68:	4638      	mov	r0, r7
 8003e6a:	f3af 8000 	nop.w
 8003e6e:	1c42      	adds	r2, r0, #1
 8003e70:	4606      	mov	r6, r0
 8003e72:	d1d6      	bne.n	8003e22 <_svfiprintf_r+0x176>
 8003e74:	89ab      	ldrh	r3, [r5, #12]
 8003e76:	065b      	lsls	r3, r3, #25
 8003e78:	f53f af2c 	bmi.w	8003cd4 <_svfiprintf_r+0x28>
 8003e7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e7e:	b01d      	add	sp, #116	; 0x74
 8003e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e84:	ab03      	add	r3, sp, #12
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	462a      	mov	r2, r5
 8003e8a:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <_svfiprintf_r+0x1f8>)
 8003e8c:	a904      	add	r1, sp, #16
 8003e8e:	4638      	mov	r0, r7
 8003e90:	f000 f87a 	bl	8003f88 <_printf_i>
 8003e94:	e7eb      	b.n	8003e6e <_svfiprintf_r+0x1c2>
 8003e96:	bf00      	nop
 8003e98:	0800450c 	.word	0x0800450c
 8003e9c:	08004516 	.word	0x08004516
 8003ea0:	00000000 	.word	0x00000000
 8003ea4:	08003bf5 	.word	0x08003bf5
 8003ea8:	08004512 	.word	0x08004512

08003eac <_printf_common>:
 8003eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eb0:	4616      	mov	r6, r2
 8003eb2:	4699      	mov	r9, r3
 8003eb4:	688a      	ldr	r2, [r1, #8]
 8003eb6:	690b      	ldr	r3, [r1, #16]
 8003eb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	bfb8      	it	lt
 8003ec0:	4613      	movlt	r3, r2
 8003ec2:	6033      	str	r3, [r6, #0]
 8003ec4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ec8:	4607      	mov	r7, r0
 8003eca:	460c      	mov	r4, r1
 8003ecc:	b10a      	cbz	r2, 8003ed2 <_printf_common+0x26>
 8003ece:	3301      	adds	r3, #1
 8003ed0:	6033      	str	r3, [r6, #0]
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	0699      	lsls	r1, r3, #26
 8003ed6:	bf42      	ittt	mi
 8003ed8:	6833      	ldrmi	r3, [r6, #0]
 8003eda:	3302      	addmi	r3, #2
 8003edc:	6033      	strmi	r3, [r6, #0]
 8003ede:	6825      	ldr	r5, [r4, #0]
 8003ee0:	f015 0506 	ands.w	r5, r5, #6
 8003ee4:	d106      	bne.n	8003ef4 <_printf_common+0x48>
 8003ee6:	f104 0a19 	add.w	sl, r4, #25
 8003eea:	68e3      	ldr	r3, [r4, #12]
 8003eec:	6832      	ldr	r2, [r6, #0]
 8003eee:	1a9b      	subs	r3, r3, r2
 8003ef0:	42ab      	cmp	r3, r5
 8003ef2:	dc26      	bgt.n	8003f42 <_printf_common+0x96>
 8003ef4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ef8:	1e13      	subs	r3, r2, #0
 8003efa:	6822      	ldr	r2, [r4, #0]
 8003efc:	bf18      	it	ne
 8003efe:	2301      	movne	r3, #1
 8003f00:	0692      	lsls	r2, r2, #26
 8003f02:	d42b      	bmi.n	8003f5c <_printf_common+0xb0>
 8003f04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f08:	4649      	mov	r1, r9
 8003f0a:	4638      	mov	r0, r7
 8003f0c:	47c0      	blx	r8
 8003f0e:	3001      	adds	r0, #1
 8003f10:	d01e      	beq.n	8003f50 <_printf_common+0xa4>
 8003f12:	6823      	ldr	r3, [r4, #0]
 8003f14:	68e5      	ldr	r5, [r4, #12]
 8003f16:	6832      	ldr	r2, [r6, #0]
 8003f18:	f003 0306 	and.w	r3, r3, #6
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	bf08      	it	eq
 8003f20:	1aad      	subeq	r5, r5, r2
 8003f22:	68a3      	ldr	r3, [r4, #8]
 8003f24:	6922      	ldr	r2, [r4, #16]
 8003f26:	bf0c      	ite	eq
 8003f28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f2c:	2500      	movne	r5, #0
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	bfc4      	itt	gt
 8003f32:	1a9b      	subgt	r3, r3, r2
 8003f34:	18ed      	addgt	r5, r5, r3
 8003f36:	2600      	movs	r6, #0
 8003f38:	341a      	adds	r4, #26
 8003f3a:	42b5      	cmp	r5, r6
 8003f3c:	d11a      	bne.n	8003f74 <_printf_common+0xc8>
 8003f3e:	2000      	movs	r0, #0
 8003f40:	e008      	b.n	8003f54 <_printf_common+0xa8>
 8003f42:	2301      	movs	r3, #1
 8003f44:	4652      	mov	r2, sl
 8003f46:	4649      	mov	r1, r9
 8003f48:	4638      	mov	r0, r7
 8003f4a:	47c0      	blx	r8
 8003f4c:	3001      	adds	r0, #1
 8003f4e:	d103      	bne.n	8003f58 <_printf_common+0xac>
 8003f50:	f04f 30ff 	mov.w	r0, #4294967295
 8003f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f58:	3501      	adds	r5, #1
 8003f5a:	e7c6      	b.n	8003eea <_printf_common+0x3e>
 8003f5c:	18e1      	adds	r1, r4, r3
 8003f5e:	1c5a      	adds	r2, r3, #1
 8003f60:	2030      	movs	r0, #48	; 0x30
 8003f62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f66:	4422      	add	r2, r4
 8003f68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f70:	3302      	adds	r3, #2
 8003f72:	e7c7      	b.n	8003f04 <_printf_common+0x58>
 8003f74:	2301      	movs	r3, #1
 8003f76:	4622      	mov	r2, r4
 8003f78:	4649      	mov	r1, r9
 8003f7a:	4638      	mov	r0, r7
 8003f7c:	47c0      	blx	r8
 8003f7e:	3001      	adds	r0, #1
 8003f80:	d0e6      	beq.n	8003f50 <_printf_common+0xa4>
 8003f82:	3601      	adds	r6, #1
 8003f84:	e7d9      	b.n	8003f3a <_printf_common+0x8e>
	...

08003f88 <_printf_i>:
 8003f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f8c:	7e0f      	ldrb	r7, [r1, #24]
 8003f8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f90:	2f78      	cmp	r7, #120	; 0x78
 8003f92:	4691      	mov	r9, r2
 8003f94:	4680      	mov	r8, r0
 8003f96:	460c      	mov	r4, r1
 8003f98:	469a      	mov	sl, r3
 8003f9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f9e:	d807      	bhi.n	8003fb0 <_printf_i+0x28>
 8003fa0:	2f62      	cmp	r7, #98	; 0x62
 8003fa2:	d80a      	bhi.n	8003fba <_printf_i+0x32>
 8003fa4:	2f00      	cmp	r7, #0
 8003fa6:	f000 80d8 	beq.w	800415a <_printf_i+0x1d2>
 8003faa:	2f58      	cmp	r7, #88	; 0x58
 8003fac:	f000 80a3 	beq.w	80040f6 <_printf_i+0x16e>
 8003fb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003fb8:	e03a      	b.n	8004030 <_printf_i+0xa8>
 8003fba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003fbe:	2b15      	cmp	r3, #21
 8003fc0:	d8f6      	bhi.n	8003fb0 <_printf_i+0x28>
 8003fc2:	a101      	add	r1, pc, #4	; (adr r1, 8003fc8 <_printf_i+0x40>)
 8003fc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fc8:	08004021 	.word	0x08004021
 8003fcc:	08004035 	.word	0x08004035
 8003fd0:	08003fb1 	.word	0x08003fb1
 8003fd4:	08003fb1 	.word	0x08003fb1
 8003fd8:	08003fb1 	.word	0x08003fb1
 8003fdc:	08003fb1 	.word	0x08003fb1
 8003fe0:	08004035 	.word	0x08004035
 8003fe4:	08003fb1 	.word	0x08003fb1
 8003fe8:	08003fb1 	.word	0x08003fb1
 8003fec:	08003fb1 	.word	0x08003fb1
 8003ff0:	08003fb1 	.word	0x08003fb1
 8003ff4:	08004141 	.word	0x08004141
 8003ff8:	08004065 	.word	0x08004065
 8003ffc:	08004123 	.word	0x08004123
 8004000:	08003fb1 	.word	0x08003fb1
 8004004:	08003fb1 	.word	0x08003fb1
 8004008:	08004163 	.word	0x08004163
 800400c:	08003fb1 	.word	0x08003fb1
 8004010:	08004065 	.word	0x08004065
 8004014:	08003fb1 	.word	0x08003fb1
 8004018:	08003fb1 	.word	0x08003fb1
 800401c:	0800412b 	.word	0x0800412b
 8004020:	682b      	ldr	r3, [r5, #0]
 8004022:	1d1a      	adds	r2, r3, #4
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	602a      	str	r2, [r5, #0]
 8004028:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800402c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004030:	2301      	movs	r3, #1
 8004032:	e0a3      	b.n	800417c <_printf_i+0x1f4>
 8004034:	6820      	ldr	r0, [r4, #0]
 8004036:	6829      	ldr	r1, [r5, #0]
 8004038:	0606      	lsls	r6, r0, #24
 800403a:	f101 0304 	add.w	r3, r1, #4
 800403e:	d50a      	bpl.n	8004056 <_printf_i+0xce>
 8004040:	680e      	ldr	r6, [r1, #0]
 8004042:	602b      	str	r3, [r5, #0]
 8004044:	2e00      	cmp	r6, #0
 8004046:	da03      	bge.n	8004050 <_printf_i+0xc8>
 8004048:	232d      	movs	r3, #45	; 0x2d
 800404a:	4276      	negs	r6, r6
 800404c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004050:	485e      	ldr	r0, [pc, #376]	; (80041cc <_printf_i+0x244>)
 8004052:	230a      	movs	r3, #10
 8004054:	e019      	b.n	800408a <_printf_i+0x102>
 8004056:	680e      	ldr	r6, [r1, #0]
 8004058:	602b      	str	r3, [r5, #0]
 800405a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800405e:	bf18      	it	ne
 8004060:	b236      	sxthne	r6, r6
 8004062:	e7ef      	b.n	8004044 <_printf_i+0xbc>
 8004064:	682b      	ldr	r3, [r5, #0]
 8004066:	6820      	ldr	r0, [r4, #0]
 8004068:	1d19      	adds	r1, r3, #4
 800406a:	6029      	str	r1, [r5, #0]
 800406c:	0601      	lsls	r1, r0, #24
 800406e:	d501      	bpl.n	8004074 <_printf_i+0xec>
 8004070:	681e      	ldr	r6, [r3, #0]
 8004072:	e002      	b.n	800407a <_printf_i+0xf2>
 8004074:	0646      	lsls	r6, r0, #25
 8004076:	d5fb      	bpl.n	8004070 <_printf_i+0xe8>
 8004078:	881e      	ldrh	r6, [r3, #0]
 800407a:	4854      	ldr	r0, [pc, #336]	; (80041cc <_printf_i+0x244>)
 800407c:	2f6f      	cmp	r7, #111	; 0x6f
 800407e:	bf0c      	ite	eq
 8004080:	2308      	moveq	r3, #8
 8004082:	230a      	movne	r3, #10
 8004084:	2100      	movs	r1, #0
 8004086:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800408a:	6865      	ldr	r5, [r4, #4]
 800408c:	60a5      	str	r5, [r4, #8]
 800408e:	2d00      	cmp	r5, #0
 8004090:	bfa2      	ittt	ge
 8004092:	6821      	ldrge	r1, [r4, #0]
 8004094:	f021 0104 	bicge.w	r1, r1, #4
 8004098:	6021      	strge	r1, [r4, #0]
 800409a:	b90e      	cbnz	r6, 80040a0 <_printf_i+0x118>
 800409c:	2d00      	cmp	r5, #0
 800409e:	d04d      	beq.n	800413c <_printf_i+0x1b4>
 80040a0:	4615      	mov	r5, r2
 80040a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80040a6:	fb03 6711 	mls	r7, r3, r1, r6
 80040aa:	5dc7      	ldrb	r7, [r0, r7]
 80040ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040b0:	4637      	mov	r7, r6
 80040b2:	42bb      	cmp	r3, r7
 80040b4:	460e      	mov	r6, r1
 80040b6:	d9f4      	bls.n	80040a2 <_printf_i+0x11a>
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d10b      	bne.n	80040d4 <_printf_i+0x14c>
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	07de      	lsls	r6, r3, #31
 80040c0:	d508      	bpl.n	80040d4 <_printf_i+0x14c>
 80040c2:	6923      	ldr	r3, [r4, #16]
 80040c4:	6861      	ldr	r1, [r4, #4]
 80040c6:	4299      	cmp	r1, r3
 80040c8:	bfde      	ittt	le
 80040ca:	2330      	movle	r3, #48	; 0x30
 80040cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80040d4:	1b52      	subs	r2, r2, r5
 80040d6:	6122      	str	r2, [r4, #16]
 80040d8:	f8cd a000 	str.w	sl, [sp]
 80040dc:	464b      	mov	r3, r9
 80040de:	aa03      	add	r2, sp, #12
 80040e0:	4621      	mov	r1, r4
 80040e2:	4640      	mov	r0, r8
 80040e4:	f7ff fee2 	bl	8003eac <_printf_common>
 80040e8:	3001      	adds	r0, #1
 80040ea:	d14c      	bne.n	8004186 <_printf_i+0x1fe>
 80040ec:	f04f 30ff 	mov.w	r0, #4294967295
 80040f0:	b004      	add	sp, #16
 80040f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040f6:	4835      	ldr	r0, [pc, #212]	; (80041cc <_printf_i+0x244>)
 80040f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80040fc:	6829      	ldr	r1, [r5, #0]
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	f851 6b04 	ldr.w	r6, [r1], #4
 8004104:	6029      	str	r1, [r5, #0]
 8004106:	061d      	lsls	r5, r3, #24
 8004108:	d514      	bpl.n	8004134 <_printf_i+0x1ac>
 800410a:	07df      	lsls	r7, r3, #31
 800410c:	bf44      	itt	mi
 800410e:	f043 0320 	orrmi.w	r3, r3, #32
 8004112:	6023      	strmi	r3, [r4, #0]
 8004114:	b91e      	cbnz	r6, 800411e <_printf_i+0x196>
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	f023 0320 	bic.w	r3, r3, #32
 800411c:	6023      	str	r3, [r4, #0]
 800411e:	2310      	movs	r3, #16
 8004120:	e7b0      	b.n	8004084 <_printf_i+0xfc>
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	f043 0320 	orr.w	r3, r3, #32
 8004128:	6023      	str	r3, [r4, #0]
 800412a:	2378      	movs	r3, #120	; 0x78
 800412c:	4828      	ldr	r0, [pc, #160]	; (80041d0 <_printf_i+0x248>)
 800412e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004132:	e7e3      	b.n	80040fc <_printf_i+0x174>
 8004134:	0659      	lsls	r1, r3, #25
 8004136:	bf48      	it	mi
 8004138:	b2b6      	uxthmi	r6, r6
 800413a:	e7e6      	b.n	800410a <_printf_i+0x182>
 800413c:	4615      	mov	r5, r2
 800413e:	e7bb      	b.n	80040b8 <_printf_i+0x130>
 8004140:	682b      	ldr	r3, [r5, #0]
 8004142:	6826      	ldr	r6, [r4, #0]
 8004144:	6961      	ldr	r1, [r4, #20]
 8004146:	1d18      	adds	r0, r3, #4
 8004148:	6028      	str	r0, [r5, #0]
 800414a:	0635      	lsls	r5, r6, #24
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	d501      	bpl.n	8004154 <_printf_i+0x1cc>
 8004150:	6019      	str	r1, [r3, #0]
 8004152:	e002      	b.n	800415a <_printf_i+0x1d2>
 8004154:	0670      	lsls	r0, r6, #25
 8004156:	d5fb      	bpl.n	8004150 <_printf_i+0x1c8>
 8004158:	8019      	strh	r1, [r3, #0]
 800415a:	2300      	movs	r3, #0
 800415c:	6123      	str	r3, [r4, #16]
 800415e:	4615      	mov	r5, r2
 8004160:	e7ba      	b.n	80040d8 <_printf_i+0x150>
 8004162:	682b      	ldr	r3, [r5, #0]
 8004164:	1d1a      	adds	r2, r3, #4
 8004166:	602a      	str	r2, [r5, #0]
 8004168:	681d      	ldr	r5, [r3, #0]
 800416a:	6862      	ldr	r2, [r4, #4]
 800416c:	2100      	movs	r1, #0
 800416e:	4628      	mov	r0, r5
 8004170:	f7fc f836 	bl	80001e0 <memchr>
 8004174:	b108      	cbz	r0, 800417a <_printf_i+0x1f2>
 8004176:	1b40      	subs	r0, r0, r5
 8004178:	6060      	str	r0, [r4, #4]
 800417a:	6863      	ldr	r3, [r4, #4]
 800417c:	6123      	str	r3, [r4, #16]
 800417e:	2300      	movs	r3, #0
 8004180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004184:	e7a8      	b.n	80040d8 <_printf_i+0x150>
 8004186:	6923      	ldr	r3, [r4, #16]
 8004188:	462a      	mov	r2, r5
 800418a:	4649      	mov	r1, r9
 800418c:	4640      	mov	r0, r8
 800418e:	47d0      	blx	sl
 8004190:	3001      	adds	r0, #1
 8004192:	d0ab      	beq.n	80040ec <_printf_i+0x164>
 8004194:	6823      	ldr	r3, [r4, #0]
 8004196:	079b      	lsls	r3, r3, #30
 8004198:	d413      	bmi.n	80041c2 <_printf_i+0x23a>
 800419a:	68e0      	ldr	r0, [r4, #12]
 800419c:	9b03      	ldr	r3, [sp, #12]
 800419e:	4298      	cmp	r0, r3
 80041a0:	bfb8      	it	lt
 80041a2:	4618      	movlt	r0, r3
 80041a4:	e7a4      	b.n	80040f0 <_printf_i+0x168>
 80041a6:	2301      	movs	r3, #1
 80041a8:	4632      	mov	r2, r6
 80041aa:	4649      	mov	r1, r9
 80041ac:	4640      	mov	r0, r8
 80041ae:	47d0      	blx	sl
 80041b0:	3001      	adds	r0, #1
 80041b2:	d09b      	beq.n	80040ec <_printf_i+0x164>
 80041b4:	3501      	adds	r5, #1
 80041b6:	68e3      	ldr	r3, [r4, #12]
 80041b8:	9903      	ldr	r1, [sp, #12]
 80041ba:	1a5b      	subs	r3, r3, r1
 80041bc:	42ab      	cmp	r3, r5
 80041be:	dcf2      	bgt.n	80041a6 <_printf_i+0x21e>
 80041c0:	e7eb      	b.n	800419a <_printf_i+0x212>
 80041c2:	2500      	movs	r5, #0
 80041c4:	f104 0619 	add.w	r6, r4, #25
 80041c8:	e7f5      	b.n	80041b6 <_printf_i+0x22e>
 80041ca:	bf00      	nop
 80041cc:	0800451d 	.word	0x0800451d
 80041d0:	0800452e 	.word	0x0800452e

080041d4 <memcpy>:
 80041d4:	440a      	add	r2, r1
 80041d6:	4291      	cmp	r1, r2
 80041d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80041dc:	d100      	bne.n	80041e0 <memcpy+0xc>
 80041de:	4770      	bx	lr
 80041e0:	b510      	push	{r4, lr}
 80041e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041ea:	4291      	cmp	r1, r2
 80041ec:	d1f9      	bne.n	80041e2 <memcpy+0xe>
 80041ee:	bd10      	pop	{r4, pc}

080041f0 <memmove>:
 80041f0:	4288      	cmp	r0, r1
 80041f2:	b510      	push	{r4, lr}
 80041f4:	eb01 0402 	add.w	r4, r1, r2
 80041f8:	d902      	bls.n	8004200 <memmove+0x10>
 80041fa:	4284      	cmp	r4, r0
 80041fc:	4623      	mov	r3, r4
 80041fe:	d807      	bhi.n	8004210 <memmove+0x20>
 8004200:	1e43      	subs	r3, r0, #1
 8004202:	42a1      	cmp	r1, r4
 8004204:	d008      	beq.n	8004218 <memmove+0x28>
 8004206:	f811 2b01 	ldrb.w	r2, [r1], #1
 800420a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800420e:	e7f8      	b.n	8004202 <memmove+0x12>
 8004210:	4402      	add	r2, r0
 8004212:	4601      	mov	r1, r0
 8004214:	428a      	cmp	r2, r1
 8004216:	d100      	bne.n	800421a <memmove+0x2a>
 8004218:	bd10      	pop	{r4, pc}
 800421a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800421e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004222:	e7f7      	b.n	8004214 <memmove+0x24>

08004224 <_free_r>:
 8004224:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004226:	2900      	cmp	r1, #0
 8004228:	d044      	beq.n	80042b4 <_free_r+0x90>
 800422a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800422e:	9001      	str	r0, [sp, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	f1a1 0404 	sub.w	r4, r1, #4
 8004236:	bfb8      	it	lt
 8004238:	18e4      	addlt	r4, r4, r3
 800423a:	f000 f913 	bl	8004464 <__malloc_lock>
 800423e:	4a1e      	ldr	r2, [pc, #120]	; (80042b8 <_free_r+0x94>)
 8004240:	9801      	ldr	r0, [sp, #4]
 8004242:	6813      	ldr	r3, [r2, #0]
 8004244:	b933      	cbnz	r3, 8004254 <_free_r+0x30>
 8004246:	6063      	str	r3, [r4, #4]
 8004248:	6014      	str	r4, [r2, #0]
 800424a:	b003      	add	sp, #12
 800424c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004250:	f000 b90e 	b.w	8004470 <__malloc_unlock>
 8004254:	42a3      	cmp	r3, r4
 8004256:	d908      	bls.n	800426a <_free_r+0x46>
 8004258:	6825      	ldr	r5, [r4, #0]
 800425a:	1961      	adds	r1, r4, r5
 800425c:	428b      	cmp	r3, r1
 800425e:	bf01      	itttt	eq
 8004260:	6819      	ldreq	r1, [r3, #0]
 8004262:	685b      	ldreq	r3, [r3, #4]
 8004264:	1949      	addeq	r1, r1, r5
 8004266:	6021      	streq	r1, [r4, #0]
 8004268:	e7ed      	b.n	8004246 <_free_r+0x22>
 800426a:	461a      	mov	r2, r3
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	b10b      	cbz	r3, 8004274 <_free_r+0x50>
 8004270:	42a3      	cmp	r3, r4
 8004272:	d9fa      	bls.n	800426a <_free_r+0x46>
 8004274:	6811      	ldr	r1, [r2, #0]
 8004276:	1855      	adds	r5, r2, r1
 8004278:	42a5      	cmp	r5, r4
 800427a:	d10b      	bne.n	8004294 <_free_r+0x70>
 800427c:	6824      	ldr	r4, [r4, #0]
 800427e:	4421      	add	r1, r4
 8004280:	1854      	adds	r4, r2, r1
 8004282:	42a3      	cmp	r3, r4
 8004284:	6011      	str	r1, [r2, #0]
 8004286:	d1e0      	bne.n	800424a <_free_r+0x26>
 8004288:	681c      	ldr	r4, [r3, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	6053      	str	r3, [r2, #4]
 800428e:	4421      	add	r1, r4
 8004290:	6011      	str	r1, [r2, #0]
 8004292:	e7da      	b.n	800424a <_free_r+0x26>
 8004294:	d902      	bls.n	800429c <_free_r+0x78>
 8004296:	230c      	movs	r3, #12
 8004298:	6003      	str	r3, [r0, #0]
 800429a:	e7d6      	b.n	800424a <_free_r+0x26>
 800429c:	6825      	ldr	r5, [r4, #0]
 800429e:	1961      	adds	r1, r4, r5
 80042a0:	428b      	cmp	r3, r1
 80042a2:	bf04      	itt	eq
 80042a4:	6819      	ldreq	r1, [r3, #0]
 80042a6:	685b      	ldreq	r3, [r3, #4]
 80042a8:	6063      	str	r3, [r4, #4]
 80042aa:	bf04      	itt	eq
 80042ac:	1949      	addeq	r1, r1, r5
 80042ae:	6021      	streq	r1, [r4, #0]
 80042b0:	6054      	str	r4, [r2, #4]
 80042b2:	e7ca      	b.n	800424a <_free_r+0x26>
 80042b4:	b003      	add	sp, #12
 80042b6:	bd30      	pop	{r4, r5, pc}
 80042b8:	2000095c 	.word	0x2000095c

080042bc <sbrk_aligned>:
 80042bc:	b570      	push	{r4, r5, r6, lr}
 80042be:	4e0e      	ldr	r6, [pc, #56]	; (80042f8 <sbrk_aligned+0x3c>)
 80042c0:	460c      	mov	r4, r1
 80042c2:	6831      	ldr	r1, [r6, #0]
 80042c4:	4605      	mov	r5, r0
 80042c6:	b911      	cbnz	r1, 80042ce <sbrk_aligned+0x12>
 80042c8:	f000 f8bc 	bl	8004444 <_sbrk_r>
 80042cc:	6030      	str	r0, [r6, #0]
 80042ce:	4621      	mov	r1, r4
 80042d0:	4628      	mov	r0, r5
 80042d2:	f000 f8b7 	bl	8004444 <_sbrk_r>
 80042d6:	1c43      	adds	r3, r0, #1
 80042d8:	d00a      	beq.n	80042f0 <sbrk_aligned+0x34>
 80042da:	1cc4      	adds	r4, r0, #3
 80042dc:	f024 0403 	bic.w	r4, r4, #3
 80042e0:	42a0      	cmp	r0, r4
 80042e2:	d007      	beq.n	80042f4 <sbrk_aligned+0x38>
 80042e4:	1a21      	subs	r1, r4, r0
 80042e6:	4628      	mov	r0, r5
 80042e8:	f000 f8ac 	bl	8004444 <_sbrk_r>
 80042ec:	3001      	adds	r0, #1
 80042ee:	d101      	bne.n	80042f4 <sbrk_aligned+0x38>
 80042f0:	f04f 34ff 	mov.w	r4, #4294967295
 80042f4:	4620      	mov	r0, r4
 80042f6:	bd70      	pop	{r4, r5, r6, pc}
 80042f8:	20000960 	.word	0x20000960

080042fc <_malloc_r>:
 80042fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004300:	1ccd      	adds	r5, r1, #3
 8004302:	f025 0503 	bic.w	r5, r5, #3
 8004306:	3508      	adds	r5, #8
 8004308:	2d0c      	cmp	r5, #12
 800430a:	bf38      	it	cc
 800430c:	250c      	movcc	r5, #12
 800430e:	2d00      	cmp	r5, #0
 8004310:	4607      	mov	r7, r0
 8004312:	db01      	blt.n	8004318 <_malloc_r+0x1c>
 8004314:	42a9      	cmp	r1, r5
 8004316:	d905      	bls.n	8004324 <_malloc_r+0x28>
 8004318:	230c      	movs	r3, #12
 800431a:	603b      	str	r3, [r7, #0]
 800431c:	2600      	movs	r6, #0
 800431e:	4630      	mov	r0, r6
 8004320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004324:	4e2e      	ldr	r6, [pc, #184]	; (80043e0 <_malloc_r+0xe4>)
 8004326:	f000 f89d 	bl	8004464 <__malloc_lock>
 800432a:	6833      	ldr	r3, [r6, #0]
 800432c:	461c      	mov	r4, r3
 800432e:	bb34      	cbnz	r4, 800437e <_malloc_r+0x82>
 8004330:	4629      	mov	r1, r5
 8004332:	4638      	mov	r0, r7
 8004334:	f7ff ffc2 	bl	80042bc <sbrk_aligned>
 8004338:	1c43      	adds	r3, r0, #1
 800433a:	4604      	mov	r4, r0
 800433c:	d14d      	bne.n	80043da <_malloc_r+0xde>
 800433e:	6834      	ldr	r4, [r6, #0]
 8004340:	4626      	mov	r6, r4
 8004342:	2e00      	cmp	r6, #0
 8004344:	d140      	bne.n	80043c8 <_malloc_r+0xcc>
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	4631      	mov	r1, r6
 800434a:	4638      	mov	r0, r7
 800434c:	eb04 0803 	add.w	r8, r4, r3
 8004350:	f000 f878 	bl	8004444 <_sbrk_r>
 8004354:	4580      	cmp	r8, r0
 8004356:	d13a      	bne.n	80043ce <_malloc_r+0xd2>
 8004358:	6821      	ldr	r1, [r4, #0]
 800435a:	3503      	adds	r5, #3
 800435c:	1a6d      	subs	r5, r5, r1
 800435e:	f025 0503 	bic.w	r5, r5, #3
 8004362:	3508      	adds	r5, #8
 8004364:	2d0c      	cmp	r5, #12
 8004366:	bf38      	it	cc
 8004368:	250c      	movcc	r5, #12
 800436a:	4629      	mov	r1, r5
 800436c:	4638      	mov	r0, r7
 800436e:	f7ff ffa5 	bl	80042bc <sbrk_aligned>
 8004372:	3001      	adds	r0, #1
 8004374:	d02b      	beq.n	80043ce <_malloc_r+0xd2>
 8004376:	6823      	ldr	r3, [r4, #0]
 8004378:	442b      	add	r3, r5
 800437a:	6023      	str	r3, [r4, #0]
 800437c:	e00e      	b.n	800439c <_malloc_r+0xa0>
 800437e:	6822      	ldr	r2, [r4, #0]
 8004380:	1b52      	subs	r2, r2, r5
 8004382:	d41e      	bmi.n	80043c2 <_malloc_r+0xc6>
 8004384:	2a0b      	cmp	r2, #11
 8004386:	d916      	bls.n	80043b6 <_malloc_r+0xba>
 8004388:	1961      	adds	r1, r4, r5
 800438a:	42a3      	cmp	r3, r4
 800438c:	6025      	str	r5, [r4, #0]
 800438e:	bf18      	it	ne
 8004390:	6059      	strne	r1, [r3, #4]
 8004392:	6863      	ldr	r3, [r4, #4]
 8004394:	bf08      	it	eq
 8004396:	6031      	streq	r1, [r6, #0]
 8004398:	5162      	str	r2, [r4, r5]
 800439a:	604b      	str	r3, [r1, #4]
 800439c:	4638      	mov	r0, r7
 800439e:	f104 060b 	add.w	r6, r4, #11
 80043a2:	f000 f865 	bl	8004470 <__malloc_unlock>
 80043a6:	f026 0607 	bic.w	r6, r6, #7
 80043aa:	1d23      	adds	r3, r4, #4
 80043ac:	1af2      	subs	r2, r6, r3
 80043ae:	d0b6      	beq.n	800431e <_malloc_r+0x22>
 80043b0:	1b9b      	subs	r3, r3, r6
 80043b2:	50a3      	str	r3, [r4, r2]
 80043b4:	e7b3      	b.n	800431e <_malloc_r+0x22>
 80043b6:	6862      	ldr	r2, [r4, #4]
 80043b8:	42a3      	cmp	r3, r4
 80043ba:	bf0c      	ite	eq
 80043bc:	6032      	streq	r2, [r6, #0]
 80043be:	605a      	strne	r2, [r3, #4]
 80043c0:	e7ec      	b.n	800439c <_malloc_r+0xa0>
 80043c2:	4623      	mov	r3, r4
 80043c4:	6864      	ldr	r4, [r4, #4]
 80043c6:	e7b2      	b.n	800432e <_malloc_r+0x32>
 80043c8:	4634      	mov	r4, r6
 80043ca:	6876      	ldr	r6, [r6, #4]
 80043cc:	e7b9      	b.n	8004342 <_malloc_r+0x46>
 80043ce:	230c      	movs	r3, #12
 80043d0:	603b      	str	r3, [r7, #0]
 80043d2:	4638      	mov	r0, r7
 80043d4:	f000 f84c 	bl	8004470 <__malloc_unlock>
 80043d8:	e7a1      	b.n	800431e <_malloc_r+0x22>
 80043da:	6025      	str	r5, [r4, #0]
 80043dc:	e7de      	b.n	800439c <_malloc_r+0xa0>
 80043de:	bf00      	nop
 80043e0:	2000095c 	.word	0x2000095c

080043e4 <_realloc_r>:
 80043e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043e8:	4680      	mov	r8, r0
 80043ea:	4614      	mov	r4, r2
 80043ec:	460e      	mov	r6, r1
 80043ee:	b921      	cbnz	r1, 80043fa <_realloc_r+0x16>
 80043f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043f4:	4611      	mov	r1, r2
 80043f6:	f7ff bf81 	b.w	80042fc <_malloc_r>
 80043fa:	b92a      	cbnz	r2, 8004408 <_realloc_r+0x24>
 80043fc:	f7ff ff12 	bl	8004224 <_free_r>
 8004400:	4625      	mov	r5, r4
 8004402:	4628      	mov	r0, r5
 8004404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004408:	f000 f838 	bl	800447c <_malloc_usable_size_r>
 800440c:	4284      	cmp	r4, r0
 800440e:	4607      	mov	r7, r0
 8004410:	d802      	bhi.n	8004418 <_realloc_r+0x34>
 8004412:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004416:	d812      	bhi.n	800443e <_realloc_r+0x5a>
 8004418:	4621      	mov	r1, r4
 800441a:	4640      	mov	r0, r8
 800441c:	f7ff ff6e 	bl	80042fc <_malloc_r>
 8004420:	4605      	mov	r5, r0
 8004422:	2800      	cmp	r0, #0
 8004424:	d0ed      	beq.n	8004402 <_realloc_r+0x1e>
 8004426:	42bc      	cmp	r4, r7
 8004428:	4622      	mov	r2, r4
 800442a:	4631      	mov	r1, r6
 800442c:	bf28      	it	cs
 800442e:	463a      	movcs	r2, r7
 8004430:	f7ff fed0 	bl	80041d4 <memcpy>
 8004434:	4631      	mov	r1, r6
 8004436:	4640      	mov	r0, r8
 8004438:	f7ff fef4 	bl	8004224 <_free_r>
 800443c:	e7e1      	b.n	8004402 <_realloc_r+0x1e>
 800443e:	4635      	mov	r5, r6
 8004440:	e7df      	b.n	8004402 <_realloc_r+0x1e>
	...

08004444 <_sbrk_r>:
 8004444:	b538      	push	{r3, r4, r5, lr}
 8004446:	4d06      	ldr	r5, [pc, #24]	; (8004460 <_sbrk_r+0x1c>)
 8004448:	2300      	movs	r3, #0
 800444a:	4604      	mov	r4, r0
 800444c:	4608      	mov	r0, r1
 800444e:	602b      	str	r3, [r5, #0]
 8004450:	f7fc fbc4 	bl	8000bdc <_sbrk>
 8004454:	1c43      	adds	r3, r0, #1
 8004456:	d102      	bne.n	800445e <_sbrk_r+0x1a>
 8004458:	682b      	ldr	r3, [r5, #0]
 800445a:	b103      	cbz	r3, 800445e <_sbrk_r+0x1a>
 800445c:	6023      	str	r3, [r4, #0]
 800445e:	bd38      	pop	{r3, r4, r5, pc}
 8004460:	20000964 	.word	0x20000964

08004464 <__malloc_lock>:
 8004464:	4801      	ldr	r0, [pc, #4]	; (800446c <__malloc_lock+0x8>)
 8004466:	f000 b811 	b.w	800448c <__retarget_lock_acquire_recursive>
 800446a:	bf00      	nop
 800446c:	20000968 	.word	0x20000968

08004470 <__malloc_unlock>:
 8004470:	4801      	ldr	r0, [pc, #4]	; (8004478 <__malloc_unlock+0x8>)
 8004472:	f000 b80c 	b.w	800448e <__retarget_lock_release_recursive>
 8004476:	bf00      	nop
 8004478:	20000968 	.word	0x20000968

0800447c <_malloc_usable_size_r>:
 800447c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004480:	1f18      	subs	r0, r3, #4
 8004482:	2b00      	cmp	r3, #0
 8004484:	bfbc      	itt	lt
 8004486:	580b      	ldrlt	r3, [r1, r0]
 8004488:	18c0      	addlt	r0, r0, r3
 800448a:	4770      	bx	lr

0800448c <__retarget_lock_acquire_recursive>:
 800448c:	4770      	bx	lr

0800448e <__retarget_lock_release_recursive>:
 800448e:	4770      	bx	lr

08004490 <_init>:
 8004490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004492:	bf00      	nop
 8004494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004496:	bc08      	pop	{r3}
 8004498:	469e      	mov	lr, r3
 800449a:	4770      	bx	lr

0800449c <_fini>:
 800449c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449e:	bf00      	nop
 80044a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044a2:	bc08      	pop	{r3}
 80044a4:	469e      	mov	lr, r3
 80044a6:	4770      	bx	lr
